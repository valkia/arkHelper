"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var http = require("./utils/request.js");
App({
    onLaunch: function () {
        var _this = this;
        var logs = wx.getStorageSync('logs') || [];
        logs.unshift(Date.now());
        wx.setStorageSync('logs', logs);
        wx.getSystemInfo({
            success: function (e) {
                _this.globalData.StatusBar = e.statusBarHeight;
                var custom = wx.getMenuButtonBoundingClientRect();
                _this.globalData.Custom = custom;
                _this.globalData.CustomBar = custom.bottom + custom.top - e.statusBarHeight;
            }
        });
        wx.login({
            success: function (_res) {
            }
        });
        wx.getSetting({
            success: function (res) {
                if (res.authSetting['scope.userInfo']) {
                    wx.getUserInfo({
                        success: function (res) {
                            _this.globalData.userInfo = res.userInfo;
                            if (_this.userInfoReadyCallback) {
                                _this.userInfoReadyCallback(res.userInfo);
                            }
                        }
                    });
                }
            }
        });
    },
    globalData: {},
    func: {
        get: http.get,
        post: http.post
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EseUNBQTJDO0FBcUYzQyxHQUFHLENBQVM7SUFDVixRQUFRLEVBQVI7UUFBQSxpQkF5Q0M7UUF2Q0MsSUFBSSxJQUFJLEdBQWEsRUFBRSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUE7UUFDcEQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQTtRQUN4QixFQUFFLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQTtRQUUvQixFQUFFLENBQUMsYUFBYSxDQUFDO1lBQ2YsT0FBTyxFQUFFLFVBQUEsQ0FBQztnQkFDUixLQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsZUFBZSxDQUFDO2dCQUM5QyxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUMsK0JBQStCLEVBQUUsQ0FBQztnQkFDbEQsS0FBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO2dCQUNoQyxLQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLGVBQWUsQ0FBQztZQUM3RSxDQUFDO1NBQ0YsQ0FBQyxDQUFBO1FBR0YsRUFBRSxDQUFDLEtBQUssQ0FBQztZQUNQLE9BQU8sWUFBQyxJQUFJO1lBR1osQ0FBQztTQUNGLENBQUMsQ0FBQTtRQUVGLEVBQUUsQ0FBQyxVQUFVLENBQUM7WUFDWixPQUFPLEVBQUUsVUFBQyxHQUFHO2dCQUNYLElBQUksR0FBRyxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFO29CQUVyQyxFQUFFLENBQUMsV0FBVyxDQUFDO3dCQUNiLE9BQU8sRUFBRSxVQUFBLEdBQUc7NEJBRVYsS0FBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQTs0QkFHdkMsSUFBSSxLQUFJLENBQUMscUJBQXFCLEVBQUU7Z0NBQzlCLEtBQUksQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUE7NkJBQ3pDO3dCQUNILENBQUM7cUJBQ0YsQ0FBQyxDQUFBO2lCQUNIO1lBQ0gsQ0FBQztTQUNGLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFDRCxVQUFVLEVBQUUsRUFFWDtJQUNELElBQUksRUFBRTtRQUNKLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRztRQUNiLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtLQUNoQjtDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vYXBwLnRzXG5pbXBvcnQgaHR0cCA9IHJlcXVpcmUoJy4vdXRpbHMvcmVxdWVzdC5qcycpIFxuZXhwb3J0IGludGVyZmFjZSBJTXlBcHAge1xuICB1c2VySW5mb1JlYWR5Q2FsbGJhY2s/KHJlczogd3guVXNlckluZm8pOiB2b2lkXG4gIGdsb2JhbERhdGE6IHtcbiAgICB1c2VySW5mbz86IHd4LlVzZXJJbmZvLFxuICAgIENvbG9yTGlzdDogW3tcbiAgICAgIHRpdGxlOiAn5auj57qiJyxcbiAgICAgIG5hbWU6ICdyZWQnLFxuICAgICAgY29sb3I6ICcjZTU0ZDQyJ1xuICAgIH0sXG4gICAgICB7XG4gICAgICAgIHRpdGxlOiAn5qGU5qmZJyxcbiAgICAgICAgbmFtZTogJ29yYW5nZScsXG4gICAgICAgIGNvbG9yOiAnI2YzN2IxZCdcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHRpdGxlOiAn5piO6buEJyxcbiAgICAgICAgbmFtZTogJ3llbGxvdycsXG4gICAgICAgIGNvbG9yOiAnI2ZiYmQwOCdcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHRpdGxlOiAn5qmE5qaEJyxcbiAgICAgICAgbmFtZTogJ29saXZlJyxcbiAgICAgICAgY29sb3I6ICcjOGRjNjNmJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdGl0bGU6ICfmo67nu78nLFxuICAgICAgICBuYW1lOiAnZ3JlZW4nLFxuICAgICAgICBjb2xvcjogJyMzOWI1NGEnXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICB0aXRsZTogJ+WkqemdkicsXG4gICAgICAgIG5hbWU6ICdjeWFuJyxcbiAgICAgICAgY29sb3I6ICcjMWNiYmI0J1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdGl0bGU6ICfmtbfok50nLFxuICAgICAgICBuYW1lOiAnYmx1ZScsXG4gICAgICAgIGNvbG9yOiAnIzAwODFmZidcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHRpdGxlOiAn5ae557SrJyxcbiAgICAgICAgbmFtZTogJ3B1cnBsZScsXG4gICAgICAgIGNvbG9yOiAnIzY3MzliNidcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHRpdGxlOiAn5pyo5qe/JyxcbiAgICAgICAgbmFtZTogJ21hdXZlJyxcbiAgICAgICAgY29sb3I6ICcjOWMyNmIwJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdGl0bGU6ICfmoYPnsoknLFxuICAgICAgICBuYW1lOiAncGluaycsXG4gICAgICAgIGNvbG9yOiAnI2UwMzk5NydcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHRpdGxlOiAn5qOV6KSQJyxcbiAgICAgICAgbmFtZTogJ2Jyb3duJyxcbiAgICAgICAgY29sb3I6ICcjYTU2NzNmJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdGl0bGU6ICfnjoTngbAnLFxuICAgICAgICBuYW1lOiAnZ3JleScsXG4gICAgICAgIGNvbG9yOiAnIzg3OTlhMydcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHRpdGxlOiAn6I2J54GwJyxcbiAgICAgICAgbmFtZTogJ2dyYXknLFxuICAgICAgICBjb2xvcjogJyNhYWFhYWEnXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICB0aXRsZTogJ+WiqOm7kScsXG4gICAgICAgIG5hbWU6ICdibGFjaycsXG4gICAgICAgIGNvbG9yOiAnIzMzMzMzMydcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHRpdGxlOiAn6ZuF55m9JyxcbiAgICAgICAgbmFtZTogJ3doaXRlJyxcbiAgICAgICAgY29sb3I6ICcjZmZmZmZmJ1xuICAgICAgfSxcbiAgICBdXG4gIH1cbiAgZnVuYzp7fVxufVxuIFxuQXBwPElNeUFwcD4oe1xuICBvbkxhdW5jaCgpIHtcbiAgICAvLyDlsZXnpLrmnKzlnLDlrZjlgqjog73liptcbiAgICB2YXIgbG9nczogbnVtYmVyW10gPSB3eC5nZXRTdG9yYWdlU3luYygnbG9ncycpIHx8IFtdXG4gICAgbG9ncy51bnNoaWZ0KERhdGUubm93KCkpXG4gICAgd3guc2V0U3RvcmFnZVN5bmMoJ2xvZ3MnLCBsb2dzKVxuXG4gICAgd3guZ2V0U3lzdGVtSW5mbyh7XG4gICAgICBzdWNjZXNzOiBlID0+IHtcbiAgICAgICAgdGhpcy5nbG9iYWxEYXRhLlN0YXR1c0JhciA9IGUuc3RhdHVzQmFySGVpZ2h0O1xuICAgICAgICBsZXQgY3VzdG9tID0gd3guZ2V0TWVudUJ1dHRvbkJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICB0aGlzLmdsb2JhbERhdGEuQ3VzdG9tID0gY3VzdG9tO1xuICAgICAgICB0aGlzLmdsb2JhbERhdGEuQ3VzdG9tQmFyID0gY3VzdG9tLmJvdHRvbSArIGN1c3RvbS50b3AgLSBlLnN0YXR1c0JhckhlaWdodDtcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgLy8g55m75b2VXG4gICAgd3gubG9naW4oe1xuICAgICAgc3VjY2VzcyhfcmVzKSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKF9yZXMuY29kZSlcbiAgICAgICAgLy8g5Y+R6YCBIF9yZXMuY29kZSDliLDlkI7lj7DmjaLlj5Ygb3BlbklkLCBzZXNzaW9uS2V5LCB1bmlvbklkXG4gICAgICB9XG4gICAgfSlcbiAgICAvLyDojrflj5bnlKjmiLfkv6Hmga9cbiAgICB3eC5nZXRTZXR0aW5nKHtcbiAgICAgIHN1Y2Nlc3M6IChyZXMpID0+IHtcbiAgICAgICAgaWYgKHJlcy5hdXRoU2V0dGluZ1snc2NvcGUudXNlckluZm8nXSkge1xuICAgICAgICAgIC8vIOW3sue7j+aOiOadg++8jOWPr+S7peebtOaOpeiwg+eUqCBnZXRVc2VySW5mbyDojrflj5blpLTlg4/mmLXnp7DvvIzkuI3kvJrlvLnmoYZcbiAgICAgICAgICB3eC5nZXRVc2VySW5mbyh7XG4gICAgICAgICAgICBzdWNjZXNzOiByZXMgPT4ge1xuICAgICAgICAgICAgICAvLyDlj6/ku6XlsIYgcmVzIOWPkemAgee7meWQjuWPsOino+eggeWHuiB1bmlvbklkXG4gICAgICAgICAgICAgIHRoaXMuZ2xvYmFsRGF0YS51c2VySW5mbyA9IHJlcy51c2VySW5mb1xuICAgICAgICAgICAgICAvLyDnlLHkuo4gZ2V0VXNlckluZm8g5piv572R57uc6K+35rGC77yM5Y+v6IO95Lya5ZyoIFBhZ2Uub25Mb2FkIOS5i+WQjuaJjei/lOWbnlxuICAgICAgICAgICAgICAvLyDmiYDku6XmraTlpITliqDlhaUgY2FsbGJhY2sg5Lul6Ziy5q2i6L+Z56eN5oOF5Ya1XG4gICAgICAgICAgICAgIGlmICh0aGlzLnVzZXJJbmZvUmVhZHlDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHRoaXMudXNlckluZm9SZWFkeUNhbGxiYWNrKHJlcy51c2VySW5mbylcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICB9LFxuICBnbG9iYWxEYXRhOiB7XG4gICAgXG4gIH0sXG4gIGZ1bmM6IHtcbiAgICBnZXQ6IGh0dHAuZ2V0LFxuICAgIHBvc3Q6IGh0dHAucG9zdFxuICB9IFxufSkiXX0=