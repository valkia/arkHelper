"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var app = getApp();
var jsonData = require("/data.js");
var HeroBasic = (function () {
    function HeroBasic(name, type, level, img) {
        this.name = name;
        this.type = type;
        this.level = level;
        this.img = img;
    }
    return HeroBasic;
}());
Page({
    data: {
        CustomBar: app.globalData.CustomBar,
        tags: [
            {
                "cn": "资质",
                "cntags": [{ name: "新手", showFlag: false }, { name: "资深干员", showFlag: false }, { name: "高级资深干员", showFlag: false }]
            },
            {
                "cn": "位置",
                "cntags": [{ name: "远程位", showFlag: false }, { name: "近战位", showFlag: false }]
            },
            {
                "cn": "性别",
                "cntags": [{ name: "男性干员", showFlag: false }, { name: "女性干员", showFlag: false }]
            },
            {
                "cn": "种类",
                "cntags": [{ name: "先锋干员", showFlag: false }, { name: "狙击干员", showFlag: false }, { name: "医疗干员", showFlag: false }, { name: "术师干员", showFlag: false }, { name: "近卫干员", showFlag: false }, { name: "重装干员", showFlag: false }, { name: "辅助干员", showFlag: false }, { name: "特种干员", showFlag: false }]
            },
            {
                "cn": "词缀",
                "cntags": [{ name: "治疗", showFlag: false }, { name: "支援", showFlag: false }, { name: "输出", showFlag: false }, { name: "群攻", showFlag: false }, { name: "减速", showFlag: false }, { name: "生存", showFlag: false }, { name: "防护", showFlag: false }, { name: "削弱", showFlag: false }, { name: "位移", showFlag: false }, { name: "控场", showFlag: false }, { name: "爆发", showFlag: false }, { name: "召唤", showFlag: false }, { name: "快速复活", showFlag: false }, { name: "费用回复", showFlag: false }]
            }
        ],
        tags_aval: {},
        checkedTags: [],
        checkedTagsTL: [],
        possible: [],
        optStars: [],
        showStars: [{ name: "清空", showFlag: true }, { name: "6", showFlag: true }, { name: "5", showFlag: true }, { name: "4", showFlag: true }, { name: "3", showFlag: true }, { name: "2", showFlag: true }, { name: "1", showFlag: true }]
    },
    onLoad: function () {
        this.init();
    },
    search: function (e) {
        var _this = this;
        var keyword = e.detail.value;
        var keyArray = keyword.split(/\s+/);
        var that = this;
        this.data.tags.forEach(function (t) {
            t['cntags'].forEach(function (t2) {
                if (t2.showFlag === true) {
                    t2.showFlag = false;
                }
            });
        });
        that.setData({
            checkedTags: [],
            tags: this.data.tags
        });
        if (keyArray.length === 0)
            that.calc();
        keyArray.forEach(function (key) {
            var times = 0;
            var result = "";
            _this.data.tags.forEach(function (t) {
                t['cntags'].forEach(function (t2) {
                    if (t2.name.includes(key)) {
                        times++;
                        result = t2.name;
                    }
                });
            });
            if (times === 1) {
                console.log(result);
                that.clickTagF(result, false);
            }
        });
    },
    clickStars: function (event) {
        console.log(event);
        var value = event.target.dataset.title;
        if (value === '清空') {
            this.data.showStars.forEach(function (s) {
                s.showFlag = false;
            });
            this.data.showStars[0] = { name: "全选", showFlag: true };
            this.setData({ optStars: [], showStars: this.data.showStars });
        }
        if (value === '全选') {
            this.data.showStars.forEach(function (s) {
                s.showFlag = true;
            });
            this.data.showStars[0] = { name: "清空", showFlag: true };
            this.setData({ optStars: ['清空', '6', '5', '4', '3', '2', '1'], showStars: this.data.showStars });
        }
        else {
            this.data.showStars.forEach(function (s) {
                if (s.name === value) {
                    s.showFlag = !s.showFlag;
                }
            });
            if (this.data.optStars.includes(value)) {
                this.data.optStars = this.data.optStars.filter(function (v, _, __) {
                    return v !== value;
                });
            }
            else {
                this.data.optStars.push(value);
            }
            this.setData({ optStars: this.data.optStars, showStars: this.data.showStars });
        }
        this.calc();
    },
    bindViewTap: function () {
        wx.navigateTo({
            url: '../index/index'
        });
    },
    calc: function () {
        var len = this.data.checkedTags.length;
        var count = Math.pow(2, this.data.checkedTags.length);
        var combs = [];
        for (var i = 0; i < count; i++) {
            var ts = [];
            var tsTL = [];
            for (var j = 0, mask = 1; j < len; j++) {
                if ((i & mask) !== 0) {
                    ts.push(this.data.checkedTags[j]);
                    tsTL.push(this.data.checkedTagsTL[j]);
                }
                mask = mask * 2;
            }
            combs.push({
                "tags": ts,
                "tagsTL": tsTL,
                "score": 0.0,
                "possible": []
            });
        }
        var optStars = this.data.optStars;
        var that = this;
        combs.forEach(function (comb) {
            var tags = comb.tags;
            if (tags.length === 0 || tags.length > 3)
                return;
            var chars = that.data.tags_aval[tags[0]].slice();
            var _loop_1 = function (i) {
                var reduced_chars = [];
                chars.forEach(function (char) {
                    var tmp = that.data.tags_aval[tags[i]];
                    tmp.forEach(function (tgch) {
                        if (char.name === tgch.name) {
                            reduced_chars.push(char);
                            return false;
                        }
                    });
                });
                chars = reduced_chars;
            };
            for (var i = 1; i < tags.length; i++) {
                _loop_1(i);
            }
            if (chars.length === 0)
                return;
            if (!tags.includes("高级资深干员")) {
                var reduce6_1 = [];
                chars.forEach(function (char) {
                    if (char.level !== 6) {
                        reduce6_1.push(char);
                    }
                });
                chars = reduce6_1;
            }
            var filtered_chars = [];
            chars.forEach(function (char) {
                if (optStars.includes(char.level.toString())) {
                    filtered_chars.push(char);
                }
            });
            chars = filtered_chars;
            comb.possible = chars;
            if (chars.length === 0)
                return;
            var s = 0;
            chars.forEach(function (char) {
                s += char.level;
            });
            s = s / chars.length;
            comb.score = s + 0.1 / tags.length + 0.9 / chars.length;
        });
        combs.sort(function (a, b) {
            return a.score > b.score ? -1 : (a.score < b.score ? 1 :
                (a.tags.length > b.tags.length ? 1 : (a.tags.length < b.tags.length ? -1 :
                    0)));
        });
        combs.forEach(function (comb) {
            if (!comb.possible || comb.possible.length === 0)
                return false;
            comb.possible.sort(function (a, b) {
                return a.level > b.level ? -1 : (a.level < b.level ? 1 : 0);
            });
        });
        that.setData({ possible: combs });
    },
    init: function () {
        var _that = this;
        this.setData({ optStars: ['清空', '6', '5', '4', '3', '2', '1'] });
        this.setData({ tags_aval: jsonData.aval });
        _that.calc();
    },
    clickTag: function (event) {
        console.log(event);
        var tag = event.target.dataset.title;
        this.clickTagF(tag, true);
    },
    clickTagF: function (tag, clickFlag) {
        var _that = this;
        var checked = false;
        if (!clickFlag) {
            this.data.tags.forEach(function (t) {
                t['cntags'].forEach(function (t2) {
                    if (t2.name === tag && t2.showFlag === false) {
                        t2.showFlag = true;
                    }
                });
            });
        }
        else {
            this.data.tags.forEach(function (t) {
                t['cntags'].forEach(function (t2) {
                    if (t2.name === tag) {
                        t2.showFlag = !t2.showFlag;
                    }
                });
            });
        }
        if ((_that.data.checkedTags).includes(tag)) {
            checked = true;
        }
        if (checked) {
            if (clickFlag) {
                _that.data.checkedTags = _that.data.checkedTags.filter(function (v, _, __) {
                    return v !== tag;
                });
                _that.setData({
                    checkedTags: _that.data.checkedTags
                });
            }
        }
        else {
            if (_that.data.checkedTags.length >= 6) {
                wx.showToast({
                    title: "无法选择更多标签：最多6个。",
                    icon: "none",
                    duration: 2000
                });
                return;
            }
            else {
                _that.data.checkedTags.push(tag);
                _that.setData({
                    checkedTags: _that.data.checkedTags
                });
            }
        }
        _that.setData({ tags: _that.data.tags });
        _that.calc();
    }
});
//# sourceMappingURL=data:application/json;base64,