"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var app = getApp();
var jsonData = require("/data.js");
var HeroBasic = (function () {
    function HeroBasic(name, type, level, img) {
        this.name = name;
        this.type = type;
        this.level = level;
        this.img = img;
    }
    return HeroBasic;
}());
var Hero = (function (_super) {
    __extends(Hero, _super);
    function Hero(name, camp, type, level, sex, characteristic, tags, hidden, name_en, img) {
        var _this = _super.call(this, name, type, level, img) || this;
        _this.camp = camp;
        _this.sex = sex;
        _this.characteristic = characteristic;
        _this.tags = tags;
        _this.hidden = hidden;
        _this["name-en"] = name_en;
        return _this;
    }
    return Hero;
}(HeroBasic));
Page({
    data: {
        tags: [
            {
                "cn": "资质",
                "cntags": ["新手", "资深干员", "高级资深干员"]
            },
            {
                "cn": "位置",
                "cntags": ["远程位", "近战位"]
            },
            {
                "cn": "性别",
                "cntags": ["男性干员", "女性干员"]
            },
            {
                "cn": "种类",
                "cntags": ["先锋干员", "狙击干员", "医疗干员", "术师干员", "近卫干员", "重装干员", "辅助干员", "特种干员"]
            },
            {
                "cn": "词缀",
                "cntags": ["治疗", "支援", "输出", "群攻", "减速", "生存", "防护", "削弱", "位移", "控场", "爆发", "召唤",
                    "快速复活", "费用回复"]
            }
        ],
        tags_aval: {},
        all_chars: {},
        avg_char_tag: 0,
        checkedTags: [],
        checkedTagsTL: [],
        possible: [],
        optStars: []
    },
    onLoad: function () {
        console.log(jsonData.dataList);
        this.init();
    },
    clickStars: function (event) {
        console.log(event);
        var _that = this;
        var value = event.target.dataset.title;
        if (value === '清空') {
            this.setData({ optStars: [] });
        }
        else {
            this.data.optStars = this.data.optStars.filter(function (v, _, __) {
                return v !== value;
            });
            this.setData({ optStars: this.data.optStars });
        }
    },
    bindViewTap: function () {
        wx.navigateTo({
            url: '../index/index'
        });
    },
    calc: function () {
        var len = this.data.checkedTags.length;
        var count = Math.pow(2, this.data.checkedTags.length);
        var combs = [];
        for (var i = 0; i < count; i++) {
            var ts = [];
            var tsTL = [];
            for (var j = 0, mask = 1; j < len; j++) {
                if ((i & mask) !== 0) {
                    ts.push(this.data.checkedTags[j]);
                    tsTL.push(this.data.checkedTagsTL[j]);
                }
                mask = mask * 2;
            }
            combs.push({
                "tags": ts,
                "tagsTL": tsTL,
                "score": 0.0,
                "possible": []
            });
        }
        var optStars = this.data.optStars;
        var that = this;
        combs.forEach(function (comb) {
            var tags = comb.tags;
            if (tags.length === 0 || tags.length > 3)
                return;
            var chars = that.data.tags_aval[tags[0]].slice();
            var _loop_1 = function (i) {
                var reduced_chars = [];
                chars.forEach(function (char) {
                    var tmp = that.data.tags_aval[tags[i]];
                    tmp.forEach(function (tgch) {
                        if (char.name === tgch.name) {
                            reduced_chars.push(char);
                            return false;
                        }
                    });
                });
                chars = reduced_chars;
            };
            for (var i = 1; i < tags.length; i++) {
                _loop_1(i);
            }
            if (chars.length === 0)
                return;
            if (!tags.includes("高级资深干员")) {
                var reduce6_1 = [];
                chars.forEach(function (char) {
                    if (char.level !== 6) {
                        reduce6_1.push(char);
                    }
                });
                chars = reduce6_1;
            }
            var filtered_chars = [];
            chars.forEach(function (char) {
                if (optStars.includes(char.level.toString())) {
                    filtered_chars.push(char);
                }
            });
            chars = filtered_chars;
            comb.possible = chars;
            if (chars.length === 0)
                return;
            var s = 0;
            chars.forEach(function (char) {
                s += char.level;
            });
            s = s / chars.length;
            comb.score = s + 0.1 / tags.length + 0.9 / chars.length;
        });
        combs.sort(function (a, b) {
            return a.score > b.score ? -1 : (a.score < b.score ? 1 :
                (a.tags.length > b.tags.length ? 1 : (a.tags.length < b.tags.length ? -1 :
                    0)));
        });
        combs.forEach(function (comb) {
            if (!comb.possible || comb.possible.length === 0)
                return false;
            var chars = comb.possible;
            var tags = comb.tags;
            console.log(tags);
            var tagsTL = comb.tagsTL;
            var chars_html;
            var colors = {
                1: "dark",
                2: "light",
                3: "success",
                4: "info",
                5: "warning",
                6: "danger"
            };
            comb.possible.sort(function (a, b) {
                return a.level > b.level ? -1 : (a.level < b.level ? 1 : 0);
            });
            var result = [];
            chars.forEach(function (char, index) {
                var tagsTmp = [];
                for (var i = 0; i < tags.length; i++) {
                    tagsTmp.push(tags[i]);
                }
                var scope = Math.floor(comb.score * 100) / 100;
                result.push({ tag: tagsTmp, scope: scope });
            });
            console.log(result);
        });
        that.setData({ possible: combs });
    },
    init: function () {
        var _that = this;
        var data = jsonData.dataList;
        this.setData({ optStars: "['清空','6','5','4','3','2','1']" });
        var tag_count = 0;
        var char_tag_sum = 0;
        var _loop_2 = function (key) {
            if (data.hasOwnProperty(key)) {
                var char_1 = data[key];
                if (char_1.hidden)
                    return "continue";
                char_1.tags.push(char_1.type + "干员");
                char_1.tags.push(char_1.sex + "性干员");
                var name_1 = char_1.name;
                char_1.tags.forEach(function (tag) {
                    if (tag in _that.data.tags_aval) {
                        var tmp_1 = _that.data.tags_aval;
                        tmp_1[tag].push({
                            "name": name_1,
                            "img": char_1["name-en"],
                            "level": char_1.level,
                            "type": char_1.type
                        });
                        _that.setData({ tags_aval: tmp_1 });
                    }
                    else {
                        var tmp_2 = _that.data.tags_aval;
                        tmp_2[tag] = [{
                                "name": name_1,
                                "img": char_1["name-en"],
                                "level": char_1.level,
                                "type": char_1.type
                            }];
                        _that.setData({ tags_aval: tmp_2 });
                        tag_count++;
                    }
                    char_tag_sum++;
                });
                var tmp = _that.data.all_chars;
                tmp.name = {
                    'level': char_1.level,
                    'tags': char_1.tags
                };
                _that.setData({ all_chars: tmp });
            }
        };
        for (var key in data) {
            _loop_2(key);
        }
        _that.setData({ avg_char_tag: (char_tag_sum / tag_count) });
        _that.calc();
    },
    clickTag: function (event) {
        console.log(event);
        var _that = this;
        var tag = event.target.dataset.title;
        var checked = false;
        if ((_that.data.checkedTags).includes(tag)) {
            checked = true;
        }
        if (checked) {
            _that.data.checkedTags = _that.data.checkedTags.filter(function (v, _, __) {
                return v !== tag;
            });
            _that.setData({
                checkedTags: _that.data.checkedTags
            });
        }
        else {
            if (_that.data.checkedTags.length >= 6) {
                wx.showToast({
                    title: "无法选择更多标签：最多6个。",
                    icon: "none",
                    duration: 2000
                });
                return;
            }
            else {
                _that.data.checkedTags.push(tag);
                _that.setData({
                    checkedTags: _that.data.checkedTags
                });
            }
        }
        _that.calc();
    }
});
//# sourceMappingURL=data:application/json;base64,