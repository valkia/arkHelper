"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var app = getApp();
var HeroBasic = (function () {
    function HeroBasic(name, type, level, img) {
        this.name = name;
        this.type = type;
        this.level = level;
        this.img = img;
    }
    return HeroBasic;
}());
var Hero = (function (_super) {
    __extends(Hero, _super);
    function Hero(name, camp, type, level, sex, characteristic, tags, hidden, name_en, img) {
        var _this = _super.call(this, name, type, level, img) || this;
        _this.camp = camp;
        _this.sex = sex;
        _this.characteristic = characteristic;
        _this.tags = tags;
        _this.hidden = hidden;
        _this["name-en"] = name_en;
        return _this;
    }
    return Hero;
}(HeroBasic));
Page({
    data: {
        tags: [
            {
                "cn": "资质",
                "cntags": ["新手", "资深干员", "高级资深干员"]
            },
            {
                "cn": "位置",
                "cntags": ["远程位", "近战位"]
            },
            {
                "cn": "性别",
                "cntags": ["男性干员", "女性干员"]
            },
            {
                "cn": "种类",
                "cntags": ["先锋干员", "狙击干员", "医疗干员", "术师干员", "近卫干员", "重装干员", "辅助干员", "特种干员"]
            },
            {
                "cn": "词缀",
                "cntags": ["治疗", "支援", "输出", "群攻", "减速", "生存", "防护", "削弱", "位移", "控场", "爆发", "召唤",
                    "快速复活", "费用回复"]
            }
        ],
        tags_aval: {},
        all_chars: {},
        avg_char_tag: 0,
        checkedTags: [],
        checkedTagsTL: [],
        possible: []
    },
    onLoad: function () {
        this.init();
    },
    bindViewTap: function () {
        wx.navigateTo({
            url: '../index/index'
        });
    },
    calc: function () {
        var len = this.data.checkedTags.length;
        var count = Math.pow(2, this.data.checkedTags.length);
        var combs = [];
        for (var i = 0; i < count; i++) {
            var ts = [];
            var tsTL = [];
            for (var j = 0, mask = 1; j < len; j++) {
                if ((i & mask) !== 0) {
                    ts.push(this.data.checkedTags[j]);
                    tsTL.push(this.data.checkedTagsTL[j]);
                }
                mask = mask * 2;
            }
            combs.push({
                "tags": ts,
                "tagsTL": tsTL,
                "score": 0.0,
                "possible": []
            });
        }
        var optStars = ["all", "6", "5", "4", "3", "2", "1"];
        var that = this;
        combs.forEach(function (comb) {
            var tags = comb.tags;
            if (tags.length === 0 || tags.length > 3)
                return;
            var chars = that.data.tags_aval[tags[0]].slice();
            var _loop_1 = function (i) {
                var reduced_chars = [];
                chars.forEach(function (char) {
                    var tmp = that.data.tags_aval[tags[i]];
                    tmp.forEach(function (tgch) {
                        if (char.name === tgch.name) {
                            reduced_chars.push(char);
                            return false;
                        }
                    });
                });
                chars = reduced_chars;
            };
            for (var i = 1; i < tags.length; i++) {
                _loop_1(i);
            }
            if (chars.length === 0)
                return;
            if (!tags.includes("高级资深干员")) {
                var reduce6_1 = [];
                chars.forEach(function (char) {
                    if (char.level !== 6) {
                        reduce6_1.push(char);
                    }
                });
                chars = reduce6_1;
            }
            var filtered_chars = [];
            chars.forEach(function (char) {
                if (optStars.includes(char.level.toString())) {
                    filtered_chars.push(char);
                }
            });
            chars = filtered_chars;
            comb.possible = chars;
            if (chars.length === 0)
                return;
            var s = 0;
            chars.forEach(function (char) {
                s += char.level;
            });
            s = s / chars.length;
            comb.score = s + 0.1 / tags.length + 0.9 / chars.length;
        });
        combs.sort(function (a, b) {
            return a.score > b.score ? -1 : (a.score < b.score ? 1 :
                (a.tags.length > b.tags.length ? 1 : (a.tags.length < b.tags.length ? -1 :
                    0)));
        });
        combs.forEach(function (comb) {
            if (!comb.possible || comb.possible.length === 0)
                return false;
            var chars = comb.possible;
            var tags = comb.tags;
            var tagsTL = comb.tagsTL;
            var chars_html;
            comb.possible.sort(function (a, b) {
                return a.level > b.level ? -1 : (a.level < b.level ? 1 : 0);
            });
        });
        that.setData({ possible: combs });
    },
    init: function () {
        var _that = this;
        app.func.get('/akhr.json', {}, function (data) {
            var tag_count = 0;
            var char_tag_sum = 0;
            var _loop_2 = function (key) {
                if (data.hasOwnProperty(key)) {
                    var char_1 = data[key];
                    if (char_1.hidden)
                        return "continue";
                    char_1.tags.push(char_1.type + "干员");
                    char_1.tags.push(char_1.sex + "性干员");
                    var name_1 = char_1.name;
                    char_1.tags.forEach(function (tag) {
                        if (tag in _that.data.tags_aval) {
                            var tmp_1 = _that.data.tags_aval;
                            tmp_1[tag].push({
                                "name": name_1,
                                "img": char_1["name-en"],
                                "level": char_1.level,
                                "type": char_1.type
                            });
                            _that.setData({ tags_aval: tmp_1 });
                        }
                        else {
                            var tmp_2 = _that.data.tags_aval;
                            tmp_2[tag] = [{
                                    "name": name_1,
                                    "img": char_1["name-en"],
                                    "level": char_1.level,
                                    "type": char_1.type
                                }];
                            _that.setData({ tags_aval: tmp_2 });
                            tag_count++;
                        }
                        char_tag_sum++;
                    });
                    var tmp = _that.data.all_chars;
                    tmp.name = {
                        'level': char_1.level,
                        'tags': char_1.tags
                    };
                    _that.setData({ all_chars: tmp });
                }
            };
            for (var key in data) {
                _loop_2(key);
            }
            _that.setData({ avg_char_tag: (char_tag_sum / tag_count) });
            _that.setData({ checkedTags: ["治疗"] });
            _that.calc();
        });
    },
    clickTag: function (event) {
        console.log(event);
        var _that = this;
        var tag = event.target.dataset.title;
        var checked = false;
        if (tag in _that.data.checkedTags) {
            checked = true;
        }
        if (checked) {
            _that.data.checkedTags = _that.data.checkedTags.filter(function (v, _, __) {
                return v !== tag;
            });
        }
        else {
            if (_that.data.checkedTags.length >= 6) {
                wx.showToast({
                    title: "无法选择更多标签：最多6个。",
                    icon: "none",
                    duration: 2000
                });
                return;
            }
            else {
                _that.data.checkedTags.push(tag);
                _that.setData({
                    checkedTags: _that.data.checkedTags
                });
            }
        }
        _that.calc();
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFncy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRhZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFDQSxJQUFJLEdBQUcsR0FBRyxNQUFNLEVBQUUsQ0FBQTtBQUVsQjtJQU1FLG1CQUFZLElBQVksRUFBRSxJQUFZLEVBQUUsS0FBYSxFQUFFLEdBQVc7UUFDaEUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7SUFDakIsQ0FBQztJQUVILGdCQUFDO0FBQUQsQ0FBQyxBQWJELElBYUM7QUFFRDtJQUFtQix3QkFBUztJQVMxQixjQUFZLElBQVksRUFBRSxJQUFZLEVBQUUsSUFBWSxFQUFFLEtBQWEsRUFBRSxHQUFXLEVBQUUsY0FBc0IsRUFBRSxJQUFRLEVBQUUsTUFBZSxFQUFFLE9BQWUsRUFBRSxHQUFXO1FBQWpLLFlBQ0Usa0JBQU0sSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLFNBUTlCO1FBUEMsS0FBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsS0FBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDZixLQUFJLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQztRQUNyQyxLQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixLQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixLQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsT0FBTyxDQUFDOztJQUU1QixDQUFDO0lBQ0gsV0FBQztBQUFELENBQUMsQUFuQkQsQ0FBbUIsU0FBUyxHQW1CM0I7QUFJRCxJQUFJLENBQUM7SUFDSCxJQUFJLEVBQUU7UUFDSixJQUFJLEVBQUU7WUFDSjtnQkFDRSxJQUFJ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Q2pCLElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztRQUNyQyxJQUFJLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFHcEIsSUFBSSxHQUFHLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUM7WUFDaEMsT0FBTyxHQUFHLElBQUksQ0FBQztTQUNoQjtRQUVELElBQUksT0FBTyxFQUFFO1lBQ1gsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUN2RSxPQUFPLENBQUMsS0FBSyxHQUFHLENBQUM7WUFDbkIsQ0FBQyxDQUFDLENBQUM7U0FFSjthQUFNO1lBQ0wsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO2dCQUV0QyxFQUFFLENBQUMsU0FBUyxDQUFDO29CQUNYLEtBQUssRUFBRSxnQkFBZ0I7b0JBQ3ZCLElBQUksRUFBRSxNQUFNO29CQUNaLFFBQVEsRUFBRSxJQUFJO2lCQUNmLENBQUMsQ0FBQTtnQkFHRixPQUFPO2FBQ1I7aUJBQU07Z0JBRUwsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNqQyxLQUFLLENBQUMsT0FBUSxDQUFDO29CQUNiLFdBQVcsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVc7aUJBQ3BDLENBQUMsQ0FBQzthQUVKO1NBQ0Y7UUFFRCxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7SUFJZixDQUFDO0NBR0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy90YWdzLmpzXHJcbnZhciBhcHAgPSBnZXRBcHAoKVxyXG5cclxuY2xhc3MgSGVyb0Jhc2ljIHtcclxuICBuYW1lPzogc3RyaW5nO1xyXG4gIHR5cGU/OiBzdHJpbmc7XHJcbiAgbGV2ZWw/OiBudW1iZXI7XHJcbiAgaW1nPzogc3RyaW5nXHJcblxyXG4gIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgdHlwZTogc3RyaW5nLCBsZXZlbDogbnVtYmVyLCBpbWc6IHN0cmluZykge1xyXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICB0aGlzLmxldmVsID0gbGV2ZWw7XHJcbiAgICB0aGlzLmltZyA9IGltZztcclxuICB9XHJcblxyXG59XHJcblxyXG5jbGFzcyBIZXJvIGV4dGVuZHMgSGVyb0Jhc2ljIHtcclxuICBjYW1wPzogc3RyaW5nO1xyXG4gIHNleD86IHN0cmluZztcclxuICBjaGFyYWN0ZXJpc3RpYz86IHN0cmluZztcclxuICB0YWdzPzogc3RyaW5nW107XHJcbiAgaGlkZGVuPzogYm9vbGVhbjtcclxuICBcIm5hbWUtZW5cIj86IHN0cmluZztcclxuXHJcblxyXG4gIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgY2FtcDogc3RyaW5nLCB0eXBlOiBzdHJpbmcsIGxldmVsOiBudW1iZXIsIHNleDogc3RyaW5nLCBjaGFyYWN0ZXJpc3RpYzogc3RyaW5nLCB0YWdzOiBbXSwgaGlkZGVuOiBib29sZWFuLCBuYW1lX2VuOiBzdHJpbmcsIGltZzogc3RyaW5nKSB7XHJcbiAgICBzdXBlcihuYW1lLCB0eXBlLCBsZXZlbCwgaW1nKTtcclxuICAgIHRoaXMuY2FtcCA9IGNhbXA7XHJcbiAgICB0aGlzLnNleCA9IHNleDtcclxuICAgIHRoaXMuY2hhcmFjdGVyaXN0aWMgPSBjaGFyYWN0ZXJpc3RpYztcclxuICAgIHRoaXMudGFncyA9IHRhZ3M7XHJcbiAgICB0aGlzLmhpZGRlbiA9IGhpZGRlbjtcclxuICAgIHRoaXNbXCJuYW1lLWVuXCJdID0gbmFtZV9lbjtcclxuXHJcbiAgfVxyXG59XHJcblxyXG5cclxuXHJcblBhZ2Uoe1xyXG4gIGRhdGE6IHtcclxuICAgIHRhZ3M6IFtcclxuICAgICAge1xyXG4gICAgICAgIFwiY25cIjogXCLotYTotKhcIixcclxuICAgICAgICBcImNudGFnc1wiOiBbXCLmlrDmiYtcIiwgXCLotYTmt7HlubLlkZhcIiwgXCLpq5jnuqfotYTmt7HlubLlkZhcIl1cclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIFwiY25cIjogXCLkvY3nva5cIixcclxuICAgICAgICBcImNudGFnc1wiOiBbXCLov5znqIvkvY1cIiwgXCLov5HmiJjkvY1cIl1cclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIFwiY25cIjogXCLmgKfliKtcIixcclxuICAgICAgICBcImNudGFnc1wiOiBbXCLnlLfmgKflubLlkZhcIiwgXCLlpbPmgKflubLlkZhcIl1cclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIFwiY25cIjogXCLnp43nsbtcIixcclxuICAgICAgICBcImNudGFnc1wiOiBbXCLlhYjplIvlubLlkZhcIiwgXCLni5nlh7vlubLlkZhcIiwgXCLljLvnlpflubLlkZhcIiwgXCLmnK/luIjlubLlkZhcIiwgXCLov5HljavlubLlkZhcIiwgXCLph43oo4XlubLlkZhcIiwgXCLovoXliqnlubLlkZhcIiwgXCLnibnnp43lubLlkZhcIl1cclxuICAgICAgICBcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIFwiY25cIjogXCLor43nvIBcIixcclxuICAgICAgICBcImNudGFnc1wiOiBbXCLmsrvnlpdcIiwgXCLmlK/mj7RcIiwgXCLovpPlh7pcIiwgXCLnvqTmlLtcIiwgXCLlh4/pgJ9cIiwgXCLnlJ/lrZhcIiwgXCLpmLLmiqRcIiwgXCLliYrlvLFcIiwgXCLkvY3np7tcIiwgXCLmjqflnLpcIiwgXCLniIblj5FcIiwgXCLlj6zllKRcIixcclxuICAgICAgICAgIFwi5b+r6YCf5aSN5rS7XCIsIFwi6LS555So5Zue5aSNXCJdXHJcbiAgICAgIH1cclxuICAgIF0sXHJcbiAgICB0YWdzX2F2YWw6IHt9ID0ge30sXHJcbiAgICBhbGxfY2hhcnM6IHt9ID0ge30sXHJcbiAgICBhdmdfY2hhcl90YWc6IDAsXHJcbiAgICBjaGVja2VkVGFnczogW10gPSBbXSxcclxuICAgIGNoZWNrZWRUYWdzVEw6IFtdID0gW10sXHJcbiAgICBwb3NzaWJsZTpbXT1bXVxyXG5cclxuICB9LFxyXG5cclxuICBvbkxvYWQoKSB7XHJcbiAgICAvLyB0aGlzLnNldERhdGEhKHtcclxuICAgIC8vICAgbG9nczogKHd4LmdldFN0b3JhZ2VTeW5jKCdsb2dzJykgfHwgW10pLm1hcCgobG9nOiBudW1iZXIpID0+IHtcclxuICAgIC8vICAgICByZXR1cm4gZm9ybWF0VGltZShuZXcgRGF0ZShsb2cpKVxyXG4gICAgLy8gICB9KVxyXG4gICAgLy8gfSlcclxuICAgIHRoaXMuaW5pdCgpO1xyXG5cclxuICB9LFxyXG5cclxuICBiaW5kVmlld1RhcCgpIHtcclxuICAgIHd4Lm5hdmlnYXRlVG8oe1xyXG4gICAgICB1cmw6ICcuLi9pbmRleC9pbmRleCdcclxuICAgIH0pXHJcbiAgfSxcclxuXHJcbiAgY2FsYygpIHtcclxuXHJcbiAgICBsZXQgbGVuID0gdGhpcy5kYXRhLmNoZWNrZWRUYWdzLmxlbmd0aDtcclxuICAgIGxldCBjb3VudCA9IE1hdGgucG93KDIsIHRoaXMuZGF0YS5jaGVja2VkVGFncy5sZW5ndGgpO1xyXG4gICAgbGV0IGNvbWJzID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcclxuICAgICAgbGV0IHRzOiBbXSA9IFtdO1xyXG4gICAgICBsZXQgdHNUTDogW10gPSBbXTtcclxuICAgICAgZm9yIChsZXQgaiA9IDAsIG1hc2sgPSAxOyBqIDwgbGVuOyBqKyspIHtcclxuICAgICAgICBpZiAoKGkgJiBtYXNrKSAhPT0gMCkge1xyXG4gICAgICAgICAgdHMucHVzaCh0aGlzLmRhdGEuY2hlY2tlZFRhZ3Nbal0pO1xyXG4gICAgICAgICAgdHNUTC5wdXNoKHRoaXMuZGF0YS5jaGVja2VkVGFnc1RMW2pdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbWFzayA9IG1hc2sgKiAyO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbWJzLnB1c2goe1xyXG4gICAgICAgIFwidGFnc1wiOiB0cyxcclxuICAgICAgICBcInRhZ3NUTFwiOiB0c1RMLFxyXG4gICAgICAgIFwic2NvcmVcIjogMC4wLFxyXG4gICAgICAgIFwicG9zc2libGVcIjogW11cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvLyBjb25zb2xlLmxvZyhjb21icyk7XHJcbiAgICBsZXQgb3B0U3RhcnM6IHN0cmluZ1tdID0gW1wiYWxsXCIsIFwiNlwiLCBcIjVcIiwgXCI0XCIsIFwiM1wiLCBcIjJcIiwgXCIxXCJdO1xyXG4gICAgLy8gJChcIi5idG4tb3B0XCIpLmVhY2goZnVuY3Rpb24gKF8sIF9fKSB7XHJcbiAgICAvLyAgIGlmICgkKHRoaXMpLmF0dHIoXCJvcHQtaWRcIikgPT09IFwiYWxsXCIgfHwgJCh0aGlzKS5oYXNDbGFzcyhcImJ0bi1zZWNvbmRhcnlcIikpIHJldHVybjtcclxuICAgIC8vICAgb3B0U3RhcnMucHVzaCgkKHRoaXMpLmF0dHIoXCJvcHQtaWRcIikpO1xyXG4gICAgLy8gfSk7XHJcbiAgICAvL2NvbnNvbGUubG9nKG9wdFN0YXJzKTtcclxuICAgIC8vJChcIiN0Ym9keS1yZWNvbW1lbmRcIikuaHRtbChcIlwiKTtcclxuICAgIHZhciB0aGF0ID0gdGhpczsvL+aKinRoaXPlr7nosaHlpI3liLbliLDkuLTml7blj5jph490aGF0XHJcbiAgICBjb21icy5mb3JFYWNoKChjb21iOiB7IFtrZXk6IHN0cmluZ106IGFueSB9KSA9PiB7XHJcbiAgICAgIGxldCB0YWdzOiBzdHJpbmdbXSA9IGNvbWIudGFncztcclxuICAgICAgaWYgKHRhZ3MubGVuZ3RoID09PSAwIHx8IHRhZ3MubGVuZ3RoID4gMykgcmV0dXJuO1xyXG4gICAgICAvL0B0cy1pZ25vcmUgXHJcbiAgICAgIGxldCBjaGFyczogSGVyb0Jhc2ljW10gPSBbLi4udGhhdC5kYXRhLnRhZ3NfYXZhbFt0YWdzWzBdXV07Ly/liIflibLmr4/kuKrlrZfnrKZcclxuICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0YWdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgbGV0IHJlZHVjZWRfY2hhcnM6IEhlcm9CYXNpY1tdPVtdO1xyXG5cclxuICAgICAgICBjaGFycy5mb3JFYWNoKChjaGFyOiBIZXJvQmFzaWMpID0+IHtcclxuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHRhZ3NfYXZhbFt0YWdzW2ldXSk7XHJcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZyhjaGFyKTtcclxuICAgICAgICAgIC8vQHRzLWlnbm9yZSBcclxuICAgICAgICAgIGxldCB0bXA6IEhlcm9CYXNpY1tdID0gdGhhdC5kYXRhLnRhZ3NfYXZhbFt0YWdzW2ldXTtcclxuICAgICAgICAgIHRtcC5mb3JFYWNoKCh0Z2NoOiBIZXJvQmFzaWMpID0+IHtcclxuICAgICAgICAgICAgaWYgKGNoYXIubmFtZSA9PT0gdGdjaC5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgcmVkdWNlZF9jaGFycy5wdXNoKGNoYXIpO1xyXG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy9AdHMtaWdub3JlIFxyXG4gICAgICAgIGNoYXJzID0gcmVkdWNlZF9jaGFycztcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGNoYXJzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xyXG4gICAgICAvL0B0cy1pZ25vcmUgXHJcbiAgICAgIGlmICghdGFncy5pbmNsdWRlcyhcIumrmOe6p+i1hOa3seW5suWRmFwiKSkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHRhZ3Muam9pbihcIixcIikgKyBcIiDkuI3lkKso6auY57qnKei1hOa3seW5suWRmFwiKTtcclxuICAgICAgICBsZXQgcmVkdWNlNjogYW55W10gPSBbXTtcclxuICAgICAgICBjaGFycy5mb3JFYWNoKGZ1bmN0aW9uIChjaGFyOiBhbnkpIHtcclxuICAgICAgICAgIGlmIChjaGFyLmxldmVsICE9PSA2KSB7XHJcbiAgICAgICAgICAgIHJlZHVjZTYucHVzaChjaGFyKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBjaGFycyA9IHJlZHVjZTY7XHJcbiAgICAgIH1cclxuICAgICAgbGV0IGZpbHRlcmVkX2NoYXJzOiBIZXJvQmFzaWNbXSA9IFtdO1xyXG4gICAgICBjaGFycy5mb3JFYWNoKGZ1bmN0aW9uIChjaGFyOiBIZXJvQmFzaWMpIHtcclxuICAgICAgICAvL2NvbnNvbGUubG9nKGNoYXIubGV2ZWwpO1xyXG4gICAgICAgIC8vQHRzLWlnbm9yZSBcclxuICAgICAgICBpZiAob3B0U3RhcnMuaW5jbHVkZXMoY2hhci5sZXZlbC50b1N0cmluZygpKSkge1xyXG4gICAgICAgICAgZmlsdGVyZWRfY2hhcnMucHVzaChjaGFyKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICAvL0B0cy1pZ25vcmUgXHJcbiAgICAgIGNoYXJzID0gZmlsdGVyZWRfY2hhcnM7XHJcblxyXG4gICAgICBjb21iLnBvc3NpYmxlID0gY2hhcnM7XHJcbiAgICAgIGlmIChjaGFycy5sZW5ndGggPT09IDApIHJldHVybjtcclxuICAgICAgbGV0IHMgPSAwO1xyXG4gICAgICBjaGFycy5mb3JFYWNoKGZ1bmN0aW9uIChjaGFyOiBhbnkpIHtcclxuICAgICAgICBzICs9IGNoYXIubGV2ZWw7XHJcbiAgICAgIH0pO1xyXG4gICAgICBzID0gcyAvIGNoYXJzLmxlbmd0aDtcclxuICAgICAgY29tYi5zY29yZSA9IHMgKyAwLjEgLyB0YWdzLmxlbmd0aCArIDAuOSAvIGNoYXJzLmxlbmd0aDtcclxuICAgIH0pO1xyXG4gICAgY29tYnMuc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICByZXR1cm4gYS5zY29yZSA+IGIuc2NvcmUgPyAtMSA6IChhLnNjb3JlIDwgYi5zY29yZSA/IDEgOlxyXG4gICAgICAgIChhLnRhZ3MubGVuZ3RoID4gYi50YWdzLmxlbmd0aCA/IDEgOiAoYS50YWdzLmxlbmd0aCA8IGIudGFncy5sZW5ndGggPyAtMSA6XHJcbiAgICAgICAgICAwKSkpO1xyXG4gICAgfSk7XHJcbiAgICAvL2xldCBubyA9IDE7XHJcbiAgICBjb21icy5mb3JFYWNoKGZ1bmN0aW9uIChjb21iOiBhbnkpIHtcclxuICAgICAgaWYgKCFjb21iLnBvc3NpYmxlIHx8IGNvbWIucG9zc2libGUubGVuZ3RoID09PSAwKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgIGxldCBjaGFycyA9IGNvbWIucG9zc2libGU7XHJcbiAgICAgIFxyXG4gICAgICBsZXQgdGFncyA9IGNvbWIudGFncztcclxuICAgICAgbGV0IHRhZ3NUTCA9IGNvbWIudGFnc1RMO1xyXG4gICAgICBsZXQgY2hhcnNfaHRtbCA6IGFueVtdO1xyXG4gICAgICAvLyBsZXQgY29sb3JzID0ge1xyXG4gICAgICAvLyAgIDE6IFwiZGFya1wiLFxyXG4gICAgICAvLyAgIDI6IFwibGlnaHRcIixcclxuICAgICAgLy8gICAzOiBcInN1Y2Nlc3NcIixcclxuICAgICAgLy8gICA0OiBcImluZm9cIixcclxuICAgICAgLy8gICA1OiBcIndhcm5pbmdcIixcclxuICAgICAgLy8gICA2OiBcImRhbmdlclwiXHJcbiAgICAgIC8vIH07XHJcbiAgICAgIGNvbWIucG9zc2libGUuc29ydChmdW5jdGlvbiAoYTogYW55LCBiOiBhbnkpIHtcclxuICAgICAgICByZXR1cm4gYS5sZXZlbCA+IGIubGV2ZWwgPyAtMSA6IChhLmxldmVsIDwgYi5sZXZlbCA/IDEgOiAwKTtcclxuICAgICAgfSk7XHJcbiAgICAgIC8vIGNoYXJzLmZvckVhY2goZnVuY3Rpb24gKF86IGFueSwgY2hhcjphbnkpIHtcclxuICAgICAgLy8gICBsZXQgcGFkZGluZyA9IHNob3dOYW1lICYmIGltYWdlU2l6ZSA8IDYwID8gXCJwYWRkaW5nLXJpZ2h0OiA0cHhcIiA6XHJcbiAgICAgIC8vICAgICBcInBhZGRpbmctcmlnaHQ6IDFweFwiO1xyXG4gICAgICAvLyAgIGxldCBzdHlsZSA9IHNob3dJbWFnZSA/IFwic3R5bGU9XFxcImJvcmRlci1yYWRpdXM6IDVweDtwYWRkaW5nOiAxcHggMXB4O1wiICtcclxuICAgICAgLy8gICAgIHBhZGRpbmcgKyBcIjtcXFwiIFwiIDogXCJcIjtcclxuICAgICAgLy8gICBsZXQgYnV0dG9uc3R5bGUgPSBpbWFnZVNpemUgPiAyNSA/XHJcbiAgICAgIC8vICAgICBcImJhY2tncm91bmQtY29sb3I6ICNBQUE7Ym9yZGVyLXJhZGl1czogNHB4O1wiIDpcclxuICAgICAgLy8gICAgIFwiYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7Ym9yZGVyLXJhZGl1czogNHB4O1wiO1xyXG4gICAgICAvLyAgIGNoYXJzX2h0bWwucHVzaChcIjxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1zbSBidG4tXCIgK1xyXG4gICAgICAvLyAgICAgY29sb3JzW2NoYXIubGV2ZWxdICsgXCIgYnRuLWNoYXIgbXktMSBkLW5vbmUgZC1zbS1pbmxpbmVcXFwiIFwiICtcclxuICAgICAgLy8gICAgIHN0eWxlICsgXCJ0aXRsZT1cXFwiXCIgKyBjaGFyLm5hbWUgKyBcIlxcXCI+XCIpO1xyXG4gICAgICAvLyAgIGlmIChzaG93SW1hZ2UpIGNoYXJzX2h0bWwucHVzaChcIjxpbWcgc3R5bGU9XFxcIlwiICsgYnV0dG9uc3R5bGUgK1xyXG4gICAgICAvLyAgICAgXCJcXFwiaGVpZ2h0PVxcXCJcIiArIGltYWdlU2l6ZSArIFwiXFxcIiB3aWR0aD1cXFwiXCIgKyBpbWFnZVNpemUgK1xyXG4gICAgICAvLyAgICAgXCJcXFwiIHNyYz1cXFwiaW1nL2NoYXJhL1wiICsgY2hhci5pbWcgKyBcIi5wbmdcXFwiPiAgIFwiKTtcclxuICAgICAgLy8gICBpZiAoaW1hZ2VTaXplID4gNjApIGNoYXJzX2h0bWwucHVzaChcIjxkaXY+XCIpO1xyXG4gICAgICAvLyAgIGlmIChzaG93TmFtZSkgY2hhcnNfaHRtbC5wdXNoKGNoYXIubmFtZSk7XHJcbiAgICAgIC8vICAgaWYgKGltYWdlU2l6ZSA+IDYwKSBjaGFyc19odG1sLnB1c2goXCI8L2Rpdj5cIik7XHJcbiAgICAgIC8vICAgY2hhcnNfaHRtbC5wdXNoKFwiPC9idXR0b24+XFxuXCIpO1xyXG4gICAgICAvLyAgIGNoYXJzX2h0bWwucHVzaChcIjxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1zbSBidG4tXCIgK1xyXG4gICAgICAvLyAgICAgY29sb3JzW2NoYXIubGV2ZWxdICsgXCIgYnRuLWNoYXIgbXktMSBkLWlubGluZSBkLXNtLW5vbmVcXFwiIFwiICtcclxuICAgICAgLy8gICAgIFwidGl0bGU9XFxcIlwiICsgY2hhci5uYW1lICsgXCJcXFwiPlwiICsgY2hhci5uYW1lICsgXCI8L2J1dHRvbj5cXG5cIik7XHJcbiAgICAgIC8vIH0pO1xyXG4gICAgICAvL2xldCB0YWdzX2h0bWwgPSBbXTtcclxuICAgICAgLy8gZm9yIChsZXQgaSA9IDA7IGkgPCB0YWdzLmxlbmd0aDsgaSsrKSB7XHJcblxyXG4gICAgICAvLyAgICAgdGFnc19odG1sLnB1c2goXHJcbiAgICAgIC8vICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tc20gYnRuLXNlY29uZGFyeSBidG4tY2hhciBteS0xXCI+JyArXHJcbiAgICAgIC8vICAgICAgIHRhZ3NbaV0gKyBcIjwvYnV0dG9uPlxcblwiKTtcclxuXHJcbiAgICAgIC8vIH1cclxuICAgICAgLy8gJChcIiN0Ym9keS1yZWNvbW1lbmRcIikuYXBwZW5kKFxyXG4gICAgICAvLyAgIFwiPHRyIGNsYXNzPVxcXCJ0ci1yZWNvbW1kXFxcIj5cIiArXHJcbiAgICAgIC8vICAgXCI8dGQgY2xhc3M9XFxcInB5LTIgZC1ub25lIGQtc20tdGFibGUtY2VsbFxcXCI+XCIgKyBubysrICsgXCI8L3RkPlwiICtcclxuICAgICAgLy8gICBcIjx0ZCBjbGFzcz1cXFwicHktMVxcXCI+XCIgKyB0YWdzX2h0bWwuam9pbihcIlwiKSArIFwiPC90ZD48dGQgY2xhc3M9XFxcInB5LTFcXFwiPlwiICtcclxuICAgICAgLy8gICBjaGFyc19odG1sLmpvaW4oXCJcIikgK1xyXG4gICAgICAvLyAgIFwiPC90ZD5cIiArXHJcbiAgICAgIC8vICAgXCI8dGQgY2xhc3M9XFxcInB5LTIgZC1ub25lIGQtc20tdGFibGUtY2VsbFxcXCI+XCIgKyBNYXRoLmZsb29yKGNvbWIuc2NvcmUgKlxyXG4gICAgICAvLyAgICAgMTAwKSAvIDEwMCArIFwiPC90ZD5cIiArXHJcbiAgICAgIC8vICAgXCI8L3RyPlwiKTtcclxuXHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgXHJcblxyXG4gICAgLy8gaWYgKGxhbmcgIT09ICdjbicpICQoJ1tkYXRhLXRvZ2dsZT1cInRvb2x0aXBcIl0nKS50b29sdGlwKCk7XHJcbiAgICAvL2h0dHBzOi8vYWsuZ3JhdWVuZWtvLnh5ei9ha2hyLmpzb25cclxuXHJcblxyXG4gICAgdGhhdC5zZXREYXRhISh7IHBvc3NpYmxlOiBjb21icyB9KTtcclxuXHJcbiAgfSxcclxuICBpbml0KCkge1xyXG4gICAgbGV0IF90aGF0ID0gdGhpcztcclxuICAgIGFwcC5mdW5jLmdldCgnL2FraHIuanNvbicsIHt9LCBmdW5jdGlvbiAoZGF0YTogSGVyb1tdKSB7XHJcblxyXG4gICAgICBsZXQgdGFnX2NvdW50ID0gMDtcclxuICAgICAgbGV0IGNoYXJfdGFnX3N1bSA9IDA7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKGRhdGEpO1xyXG5cclxuXHJcblxyXG5cclxuICAgICAgZm9yIChjb25zdCBrZXkgaW4gZGF0YSkge1xyXG4gICAgICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgIGNvbnN0IGNoYXIgPSBkYXRhW2tleV07XHJcbiAgICAgICAgICBpZiAoY2hhci5oaWRkZW4pIGNvbnRpbnVlO1xyXG4gICAgICAgICAgY2hhci50YWdzIS5wdXNoKGNoYXIudHlwZSArIFwi5bmy5ZGYXCIpO1xyXG4gICAgICAgICAgY2hhci50YWdzIS5wdXNoKGNoYXIuc2V4ICsgXCLmgKflubLlkZhcIik7XHJcbiAgICAgICAgICBsZXQgbmFtZSA9IGNoYXIubmFtZTtcclxuICAgICAgICAgIGNoYXIudGFncyEuZm9yRWFjaChmdW5jdGlvbiAodGFnOiBzdHJpbmcpIHtcclxuICAgICAgICAgICAgaWYgKHRhZyBpbiBfdGhhdC5kYXRhLnRhZ3NfYXZhbCkge1xyXG5cclxuICAgICAgICAgICAgICBsZXQgdG1wOiB7IFtrZXk6IHN0cmluZ106IEhlcm9CYXNpY1tdIH0gPSBfdGhhdC5kYXRhLnRhZ3NfYXZhbDtcclxuICAgICAgICAgICAgICB0bXBbdGFnXS5wdXNoKHtcclxuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBuYW1lLFxyXG4gICAgICAgICAgICAgICAgXCJpbWdcIjogY2hhcltcIm5hbWUtZW5cIl0sXHJcbiAgICAgICAgICAgICAgICBcImxldmVsXCI6IGNoYXIubGV2ZWwsXHJcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogY2hhci50eXBlXHJcbiAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgIF90aGF0LnNldERhdGEhKHsgdGFnc19hdmFsOiB0bXAgfSlcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgIGxldCB0bXA6IHsgW2tleTogc3RyaW5nXTogSGVyb0Jhc2ljW10gfSA9IF90aGF0LmRhdGEudGFnc19hdmFsO1xyXG5cclxuICAgICAgICAgICAgICB0bXBbdGFnXSA9IFt7XHJcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogbmFtZSxcclxuICAgICAgICAgICAgICAgIFwiaW1nXCI6IGNoYXJbXCJuYW1lLWVuXCJdLFxyXG4gICAgICAgICAgICAgICAgXCJsZXZlbFwiOiBjaGFyLmxldmVsLFxyXG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IGNoYXIudHlwZVxyXG4gICAgICAgICAgICAgIH1dO1xyXG5cclxuICAgICAgICAgICAgICBfdGhhdC5zZXREYXRhISh7IHRhZ3NfYXZhbDogdG1wIH0pXHJcbiAgICAgICAgICAgICAgdGFnX2NvdW50Kys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2hhcl90YWdfc3VtKys7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIGxldCB0bXA6IHsgW2tleTogc3RyaW5nXTogSGVybyB9ID0gX3RoYXQuZGF0YS5hbGxfY2hhcnM7XHJcbiAgICAgICAgICB0bXAubmFtZSA9IHtcclxuICAgICAgICAgICAgJ2xldmVsJzogY2hhci5sZXZlbCxcclxuICAgICAgICAgICAgJ3RhZ3MnOiBjaGFyLnRhZ3NcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICBfdGhhdC5zZXREYXRhISh7IGFsbF9jaGFyczogdG1wIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG5cclxuXHJcblxyXG4gICAgICBfdGhhdC5zZXREYXRhISh7IGF2Z19jaGFyX3RhZzogKGNoYXJfdGFnX3N1bSAvIHRhZ19jb3VudCkgfSk7XHJcblxyXG4gICAgICBfdGhhdC5zZXREYXRhISh7IGNoZWNrZWRUYWdzOiBbXCLmsrvnlpdcIl0gfSlcclxuICAgICAgX3RoYXQuY2FsYygpO1xyXG4gICAgfSk7XHJcbiAgfSxcclxuICBjbGlja1RhZyhldmVudDphbnkpIHtcclxuICAgIGNvbnNvbGUubG9nKGV2ZW50KTtcclxuICAgIGxldCBfdGhhdCA9IHRoaXM7XHJcbiAgICBsZXQgdGFnID0gZXZlbnQudGFyZ2V0LmRhdGFzZXQudGl0bGU7XHJcbiAgICBsZXQgY2hlY2tlZCA9IGZhbHNlO1xyXG5cclxuICAgIC8v5piv5ZCm54K56L+HXHJcbiAgICBpZiAodGFnIGluIF90aGF0LmRhdGEuY2hlY2tlZFRhZ3Mpe1xyXG4gICAgICBjaGVja2VkID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoY2hlY2tlZCkge1xyXG4gICAgICBfdGhhdC5kYXRhLmNoZWNrZWRUYWdzID0gX3RoYXQuZGF0YS5jaGVja2VkVGFncy5maWx0ZXIoZnVuY3Rpb24gKHYsIF8sIF9fKSB7XHJcbiAgICAgICAgcmV0dXJuIHYgIT09IHRhZztcclxuICAgICAgfSk7XHJcblxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKF90aGF0LmRhdGEuY2hlY2tlZFRhZ3MubGVuZ3RoID49IDYpIHtcclxuXHJcbiAgICAgICAgd3guc2hvd1RvYXN0KHtcclxuICAgICAgICAgIHRpdGxlOiBcIuaXoOazlemAieaLqeabtOWkmuagh+etvu+8muacgOWkmjbkuKrjgIJcIixcclxuICAgICAgICAgIGljb246IFwibm9uZVwiLFxyXG4gICAgICAgICAgZHVyYXRpb246IDIwMDBcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICAvL2FsZXJ0KFwi5peg5rOV6YCJ5oup5pu05aSa5qCH562+77ya5pyA5aSaNuS4quOAglwiKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy9AdHMtaWdub3JlXHJcbiAgICAgICAgX3RoYXQuZGF0YS5jaGVja2VkVGFncy5wdXNoKHRhZyk7XHJcbiAgICAgICAgX3RoYXQuc2V0RGF0YSEoe1xyXG4gICAgICAgICAgY2hlY2tlZFRhZ3M6IF90aGF0LmRhdGEuY2hlY2tlZFRhZ3NcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8kKHRoaXMpLnRvZ2dsZUNsYXNzKFwiYnRuLXByaW1hcnkgYnRuLXNlY29uZGFyeVwiKTtcclxuICAgIF90aGF0LmNhbGMoKTtcclxuXHJcblxyXG5cclxuICB9XHJcblxyXG5cclxufSkiXX0=