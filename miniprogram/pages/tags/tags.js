"use strict";
var app = getApp();
Page({
    data: {
        tags: [
            {
                "cn": "资质",
                "cntags": ["新手", "资深干员", "高级资深干员"],
                "en": "Qualification",
                "entags": ["Newbie", "Senior", "Advanced Senior"]
            },
            {
                "cn": "位置",
                "cntags": ["远程位", "近战位"],
                "en": "Position",
                "entags": ["Ranged", "Melee"]
            },
            {
                "cn": "性别",
                "cntags": ["男性干员", "女性干员"],
                "en": "Gender",
                "entags": ["Male", "Female"]
            },
            {
                "cn": "种类",
                "cntags": ["先锋干员", "狙击干员", "医疗干员", "术师干员", "近卫干员", "重装干员", "辅助干员", "特种干员"],
                "en": "Class",
                "entags": ["Vanguard", "Sniper", "Medic", "Caster", "Guard", "Defender", "Support",
                    "Specialist"
                ]
            },
            {
                "cn": "词缀",
                "cntags": ["治疗", "支援", "输出", "群攻", "减速", "生存", "防护", "削弱", "位移", "控场", "爆发", "召唤",
                    "快速复活", "费用回复"
                ],
                "en": "Affix",
                "entags": ["Healing", "Support", "DPS", "Splash", "Slow", "Survival", "Protection",
                    "Debuffer", "Displacement", "Crowd Control", "Burst", "Summoner",
                    "Quick Resurrection", "Cost Recovery"
                ]
            }
        ],
        tags_aval: [],
        all_chars: {},
        avg_char_tag: 0,
        checkedTags: [],
        checkedTagsTL: []
    },
    onLoad: function () {
        console.log("666");
        this.calc();
    },
    bindViewTap: function () {
        wx.navigateTo({
            url: '../index/index'
        });
    },
    calc: function () {
        var len = this.data.checkedTags.length;
        var count = Math.pow(2, this.data.checkedTags.length);
        var combs = [];
        for (var i = 0; i < count; i++) {
            var ts = [];
            var tsTL = [];
            for (var j = 0, mask = 1; j < len; j++) {
                if ((i & mask) !== 0) {
                    ts.push(this.data.checkedTags[j]);
                    tsTL.push(this.data.checkedTagsTL[j]);
                }
                mask = mask * 2;
            }
            combs.push({
                "tags": ts,
                "tagsTL": tsTL,
                "score": 0.0,
                "possible": []
            });
        }
        var optStars = [];
        var that = this;
        combs.forEach(function (comb) {
            var tags = comb.tags;
            if (tags.length === 0 || tags.length > 3)
                return;
            var chars = that.data.tags_aval[tags[0]].slice();
            var _loop_1 = function (i) {
                var reduced_chars = [];
                chars.forEach(function (char) {
                    that.data.tags_aval[tags[i]].forEach(function (tgch) {
                        if (char.name === tgch.name) {
                            reduced_chars.push(char);
                            return false;
                        }
                    });
                });
                chars = reduced_chars;
            };
            for (var i = 1; i < tags.length; i++) {
                _loop_1(i);
            }
            if (chars.length === 0)
                return;
            if (!tags.includes("高级资深干员")) {
                var reduce6_1 = [];
                chars.forEach(function (char) {
                    if (char.level !== 6) {
                        reduce6_1.push(char);
                    }
                });
                chars = reduce6_1;
            }
            var filtered_chars;
            chars.forEach(function (char) {
                if (optStars.includes(char.level.toString())) {
                    filtered_chars.push(char);
                }
            });
            chars = filtered_chars;
            comb.possible = chars;
            if (chars.length === 0)
                return;
            var s = 0;
            chars.forEach(function (char) {
                s += char.level;
            });
            s = s / chars.length;
            comb.score = s + 0.1 / tags.length + 0.9 / chars.length;
        });
        combs.sort(function (a, b) {
            return a.score > b.score ? -1 : (a.score < b.score ? 1 :
                (a.tags.length > b.tags.length ? 1 : (a.tags.length < b.tags.length ? -1 :
                    0)));
        });
        combs.forEach(function (comb) {
            if (!comb.possible || comb.possible.length === 0)
                return;
            comb.possible.sort(function (a, b) {
                return a.level > b.level ? -1 : (a.level < b.level ? 1 : 0);
            });
        });
        var _that = this;
        app.func.get('/akhr.json', {}, function (data) {
            var tag_count = 0;
            var char_tag_sum = 0;
            data.forEach(function (char) {
                if (char.hidden)
                    return;
                char.tags.push(char.type + "干员");
                char.tags.push(char.sex + "性干员");
                var name = char.name;
                char.tags.forEach(function (tag) {
                    if (tag in _that.data.tags_aval) {
                        _that.data.tags_aval[tag].push({
                            "name": name,
                            "img": char["name-en"],
                            "level": char.level,
                            "type": char.type
                        });
                    }
                    else {
                        _that.data.tags_aval[tag] = [{
                                "name": name,
                                "img": char["name-en"],
                                "level": char.level,
                                "type": char.type
                            }];
                        tag_count++;
                    }
                    char_tag_sum++;
                });
                _that.data.all_chars[name] = {
                    'level': char.level,
                    'tags': char.tags
                };
            });
            _that.data.avg_char_tag = char_tag_sum / tag_count;
            console.log(data);
            _that.data.checkedTags.push("治疗");
            _that.calc();
        });
    }
});
//# sourceMappingURL=data:application/json;base64,