"use strict";
var app = getApp();
Page({
    data: {
        tags: [
            {
                "cn": "资质",
                "cntags": ["新手", "资深干员", "高级资深干员"],
                "en": "Qualification",
                "entags": ["Newbie", "Senior", "Advanced Senior"]
            },
            {
                "cn": "位置",
                "cntags": ["远程位", "近战位"],
                "en": "Position",
                "entags": ["Ranged", "Melee"]
            },
            {
                "cn": "性别",
                "cntags": ["男性干员", "女性干员"],
                "en": "Gender",
                "entags": ["Male", "Female"]
            },
            {
                "cn": "种类",
                "cntags": ["先锋干员", "狙击干员", "医疗干员", "术师干员", "近卫干员", "重装干员", "辅助干员", "特种干员"],
                "en": "Class",
                "entags": ["Vanguard", "Sniper", "Medic", "Caster", "Guard", "Defender", "Support",
                    "Specialist"
                ]
            },
            {
                "cn": "词缀",
                "cntags": ["治疗", "支援", "输出", "群攻", "减速", "生存", "防护", "削弱", "位移", "控场", "爆发", "召唤",
                    "快速复活", "费用回复"
                ],
                "en": "Affix",
                "entags": ["Healing", "Support", "DPS", "Splash", "Slow", "Survival", "Protection",
                    "Debuffer", "Displacement", "Crowd Control", "Burst", "Summoner",
                    "Quick Resurrection", "Cost Recovery"
                ]
            }
        ],
        tags_aval: [],
        all_chars: {},
        avg_char_tag: 0,
        checkedTags: [],
        checkedTagsTL: []
    },
    onLoad: function () {
        console.log("666");
        this.calc();
    },
    bindViewTap: function () {
        wx.navigateTo({
            url: '../index/index'
        });
    },
    calc: function () {
        var len = this.data.checkedTags.length;
        var count = Math.pow(2, this.data.checkedTags.length);
        var combs = [];
        for (var i = 0; i < count; i++) {
            var ts = [];
            var tsTL = [];
            for (var j = 0, mask = 1; j < len; j++) {
                if ((i & mask) !== 0) {
                    ts.push(this.data.checkedTags[j]);
                    tsTL.push(this.data.checkedTagsTL[j]);
                }
                mask = mask * 2;
            }
            combs.push({
                "tags": ts,
                "tagsTL": tsTL,
                "score": 0.0,
                "possible": []
            });
        }
        var optStars = [];
        var that = this;
        combs.forEach(function (comb) {
            var tags = comb.tags;
            if (tags.length === 0 || tags.length > 3)
                return;
            var chars = that.data.tags_aval[tags[0]].slice();
            var _loop_1 = function (i) {
                var reduced_chars = [];
                chars.forEach(function (char) {
                    that.data.tags_aval[tags[i]].forEach(tgch, function (any) {
                        if (char.name === tgch.name) {
                            reduced_chars.push(char);
                            return false;
                        }
                    });
                });
                chars = reduced_chars;
            };
            for (var i = 1; i < tags.length; i++) {
                _loop_1(i);
            }
            if (chars.length === 0)
                return;
            if (!tags.includes("高级资深干员")) {
                var reduce6_1 = [];
                chars.forEach(function (_, char) {
                    if (char.level !== 6) {
                        reduce6_1.push(char);
                    }
                });
                chars = reduce6_1;
            }
            var filtered_chars;
            chars.forEach(function (_, char) {
                if (optStars.includes(char.level.toString())) {
                    filtered_chars.push(char);
                }
            });
            chars = filtered_chars;
            comb.possible = chars;
            if (chars.length === 0)
                return;
            var s = 0;
            chars.forEach(function (_, char) {
                s += char.level;
            });
            s = s / chars.length;
            comb.score = s + 0.1 / tags.length + 0.9 / chars.length;
        });
        combs.sort(function (a, b) {
            return a.score > b.score ? -1 : (a.score < b.score ? 1 :
                (a.tags.length > b.tags.length ? 1 : (a.tags.length < b.tags.length ? -1 :
                    0)));
        });
        combs.forEach(function (_, comb) {
            if (!comb.possible || comb.possible.length === 0)
                return;
            comb.possible.sort(function (a, b) {
                return a.level > b.level ? -1 : (a.level < b.level ? 1 : 0);
            });
        });
        var _that = this;
        app.func.get('/akhr.json', {}, function (data) {
            var tag_count = 0;
            var char_tag_sum = 0;
            data.forEach(function (char) {
                if (char.hidden)
                    return;
                char.tags.push(char.type + "干员");
                char.tags.push(char.sex + "性干员");
                var name = char.name;
                char.tags.forEach(function (tag) {
                    if (tag in _that.data.tags_aval) {
                        _that.data.tags_aval[tag].push({
                            "name": name,
                            "img": char["name-en"],
                            "level": char.level,
                            "type": char.type
                        });
                    }
                    else {
                        _that.data.tags_aval[tag] = [{
                                "name": name,
                                "img": char["name-en"],
                                "level": char.level,
                                "type": char.type
                            }];
                        tag_count++;
                    }
                    char_tag_sum++;
                });
                _that.data.all_chars[name] = {
                    'level': char.level,
                    'tags': char.tags
                };
            });
            _that.data.avg_char_tag = char_tag_sum / tag_count;
            console.log(data);
            _that.data.checkedTags.push("治疗");
            _that.calc();
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFncy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRhZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLElBQUksR0FBRyxHQUFHLE1BQU0sRUFBRSxDQUFBO0FBQ2xCLElBQUksQ0FBQztJQUNILElBQUksRUFBRTtRQUNKLElBQUksRUFBRTtZQUNKO2dCQUNFLElBQUksRUFBRSxJQUFJO2dCQUNWLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDO2dCQUNsQyxJQUFJLEVBQUUsZUFBZTtnQkFDckIsUUFBUSxFQUFFLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxpQkFBaUIsQ0FBQzthQUNsRDtZQUNEO2dCQUNFLElBQUksRUFBRSxJQUFJO2dCQUNWLFFBQVEsRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUM7Z0JBQ3hCLElBQUksRUFBRSxVQUFVO2dCQUNoQixRQUFRLEVBQUUsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDO2FBQzlCO1lBQ0Q7Z0JBQ0UsSUFBSSxFQUFFLElBQUk7Z0JBQ1YsUUFBUSxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQztnQkFDMUIsSUFBSSxFQUFFLFFBQVE7Z0JBQ2QsUUFBUSxFQUFFLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQzthQUM3QjtZQUNEO2dCQUNFLElBQUksRUFBRSxJQUFJO2dCQUNWLFFBQVEsRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUM7Z0JBQzFFLElBQUksRUFBRSxPQUFPO2dCQUNiLFFBQVEsRUFBRSxDQUFDLFVBQVUsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVM7b0JBQ2hGLFlBQVk7aUJBQ2I7YUFDRjtZQUNEO2dCQUNFLElBQUksRUFBRSxJQUFJO2dCQUNWLFFBQVEs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PSBnZXRBcHAoKSAgXHJcblBhZ2Uoe1xyXG4gIGRhdGE6IHtcclxuICAgIHRhZ3M6IFtcclxuICAgICAge1xyXG4gICAgICAgIFwiY25cIjogXCLotYTotKhcIixcclxuICAgICAgICBcImNudGFnc1wiOiBbXCLmlrDmiYtcIiwgXCLotYTmt7HlubLlkZhcIiwgXCLpq5jnuqfotYTmt7HlubLlkZhcIl0sXHJcbiAgICAgICAgXCJlblwiOiBcIlF1YWxpZmljYXRpb25cIixcclxuICAgICAgICBcImVudGFnc1wiOiBbXCJOZXdiaWVcIiwgXCJTZW5pb3JcIiwgXCJBZHZhbmNlZCBTZW5pb3JcIl1cclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIFwiY25cIjogXCLkvY3nva5cIixcclxuICAgICAgICBcImNudGFnc1wiOiBbXCLov5znqIvkvY1cIiwgXCLov5HmiJjkvY1cIl0sXHJcbiAgICAgICAgXCJlblwiOiBcIlBvc2l0aW9uXCIsXHJcbiAgICAgICAgXCJlbnRhZ3NcIjogW1wiUmFuZ2VkXCIsIFwiTWVsZWVcIl1cclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIFwiY25cIjogXCLmgKfliKtcIixcclxuICAgICAgICBcImNudGFnc1wiOiBbXCLnlLfmgKflubLlkZhcIiwgXCLlpbPmgKflubLlkZhcIl0sXHJcbiAgICAgICAgXCJlblwiOiBcIkdlbmRlclwiLFxyXG4gICAgICAgIFwiZW50YWdzXCI6IFtcIk1hbGVcIiwgXCJGZW1hbGVcIl1cclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIFwiY25cIjogXCLnp43nsbtcIixcclxuICAgICAgICBcImNudGFnc1wiOiBbXCLlhYjplIvlubLlkZhcIiwgXCLni5nlh7vlubLlkZhcIiwgXCLljLvnlpflubLlkZhcIiwgXCLmnK/luIjlubLlkZhcIiwgXCLov5HljavlubLlkZhcIiwgXCLph43oo4XlubLlkZhcIiwgXCLovoXliqnlubLlkZhcIiwgXCLnibnnp43lubLlkZhcIl0sXHJcbiAgICAgICAgXCJlblwiOiBcIkNsYXNzXCIsXHJcbiAgICAgICAgXCJlbnRhZ3NcIjogW1wiVmFuZ3VhcmRcIiwgXCJTbmlwZXJcIiwgXCJNZWRpY1wiLCBcIkNhc3RlclwiLCBcIkd1YXJkXCIsIFwiRGVmZW5kZXJcIiwgXCJTdXBwb3J0XCIsXHJcbiAgICAgICAgICBcIlNwZWNpYWxpc3RcIlxyXG4gICAgICAgIF1cclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIFwiY25cIjogXCLor43nvIBcIixcclxuICAgICAgICBcImNudGFnc1wiOiBbXCLmsrvnlpdcIiwgXCLmlK/mj7RcIiwgXCLovpPlh7pcIiwgXCLnvqTmlLtcIiwgXCLlh4/pgJ9cIiwgXCLnlJ/lrZhcIiwgXCLpmLLmiqRcIiwgXCLliYrlvLFcIiwgXCLkvY3np7tcIiwgXCLmjqflnLpcIiwgXCLniIblj5FcIiwgXCLlj6zllKRcIixcclxuICAgICAgICAgIFwi5b+r6YCf5aSN5rS7XCIsIFwi6LS555So5Zue5aSNXCJcclxuICAgICAgICBdLFxyXG4gICAgICAgIFwiZW5cIjogXCJBZmZpeFwiLFxyXG4gICAgICAgIFwiZW50YWdzXCI6IFtcIkhlYWxpbmdcIiwgXCJTdXBwb3J0XCIsIFwiRFBTXCIsIFwiU3BsYXNoXCIsIFwiU2xvd1wiLCBcIlN1cnZpdmFsXCIsIFwiUHJvdGVjdGlvblwiLFxyXG4gICAgICAgICAgXCJEZWJ1ZmZlclwiLCBcIkRpc3BsYWNlbWVudFwiLCBcIkNyb3dkIENvbnRyb2xcIiwgXCJCdXJzdFwiLCBcIlN1bW1vbmVyXCIsXHJcbiAgICAgICAgICBcIlF1aWNrIFJlc3VycmVjdGlvblwiLCBcIkNvc3QgUmVjb3ZlcnlcIlxyXG4gICAgICAgIF1cclxuICAgICAgfVxyXG4gICAgXSAsXHJcbiAgICAgdGFnc19hdmFsIDogW109W10sXHJcbiAgICAgYWxsX2NoYXJzIDoge30sXHJcbiAgICAgYXZnX2NoYXJfdGFnIDogMCxcclxuICAgICBjaGVja2VkVGFncyA6IFtdPVtdLFxyXG4gICAgY2hlY2tlZFRhZ3NUTDogW10gPSBbXVxyXG4gICAgIFxyXG4gIH0sXHJcbiAgXHJcbiAgb25Mb2FkKCkge1xyXG4gICAgLy8gdGhpcy5zZXREYXRhISh7XHJcbiAgICAvLyAgIGxvZ3M6ICh3eC5nZXRTdG9yYWdlU3luYygnbG9ncycpIHx8IFtdKS5tYXAoKGxvZzogbnVtYmVyKSA9PiB7XHJcbiAgICAvLyAgICAgcmV0dXJuIGZvcm1hdFRpbWUobmV3IERhdGUobG9nKSlcclxuICAgIC8vICAgfSlcclxuICAgIC8vIH0pXHJcbiAgICBjb25zb2xlLmxvZyhcIjY2NlwiKTtcclxuICAgIHRoaXMuY2FsYygpO1xyXG4gIH0sXHJcblxyXG4gIGJpbmRWaWV3VGFwKCkge1xyXG4gICAgd3gubmF2aWdhdGVUbyh7XHJcbiAgICAgIHVybDogJy4uL2luZGV4L2luZGV4J1xyXG4gICAgfSlcclxuICB9LFxyXG5cclxuICBjYWxjKCkge1xyXG4gICAgbGV0IGxlbiA9IHRoaXMuZGF0YS5jaGVja2VkVGFncy5sZW5ndGg7XHJcbiAgICBsZXQgY291bnQgPSBNYXRoLnBvdygyLCB0aGlzLmRhdGEuY2hlY2tlZFRhZ3MubGVuZ3RoKTtcclxuICAgIGxldCBjb21icyA9IFtdO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XHJcbiAgICAgIGxldCB0cyA6IFtdPVtdO1xyXG4gICAgICAgIGxldCAgdHNUTCA6IFtdPVtdO1xyXG4gICAgICBmb3IgKGxldCBqID0gMCwgbWFzayA9IDE7IGogPCBsZW47IGorKykge1xyXG4gICAgICAgIGlmICgoaSAmIG1hc2spICE9PSAwKSB7XHJcbiAgICAgICAgICB0cy5wdXNoKHRoaXMuZGF0YS5jaGVja2VkVGFnc1tqXSk7XHJcbiAgICAgICAgICB0c1RMLnB1c2godGhpcy5kYXRhLmNoZWNrZWRUYWdzVExbal0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBtYXNrID0gbWFzayAqIDI7XHJcbiAgICAgIH1cclxuICAgICAgY29tYnMucHVzaCh7XHJcbiAgICAgICAgXCJ0YWdzXCI6IHRzLFxyXG4gICAgICAgIFwidGFnc1RMXCI6IHRzVEwsXHJcbiAgICAgICAgXCJzY29yZVwiOiAwLjAsXHJcbiAgICAgICAgXCJwb3NzaWJsZVwiOiBbXVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIC8vIGNvbnNvbGUubG9nKGNvbWJzKTsgXHJcbiAgICBsZXQgb3B0U3RhcnMgOnN0cmluZ1tdPVtdO1xyXG4gICAgLy8gJChcIi5idG4tb3B0XCIpLmVhY2goZnVuY3Rpb24gKF8sIF9fKSB7XHJcbiAgICAvLyAgIGlmICgkKHRoaXMpLmF0dHIoXCJvcHQtaWRcIikgPT09IFwiYWxsXCIgfHwgJCh0aGlzKS5oYXNDbGFzcyhcImJ0bi1zZWNvbmRhcnlcIikpIHJldHVybjtcclxuICAgIC8vICAgb3B0U3RhcnMucHVzaCgkKHRoaXMpLmF0dHIoXCJvcHQtaWRcIikpO1xyXG4gICAgLy8gfSk7XHJcbiAgICAvL2NvbnNvbGUubG9nKG9wdFN0YXJzKTsgXHJcbiAgICAvLyQoXCIjdGJvZHktcmVjb21tZW5kXCIpLmh0bWwoXCJcIik7XHJcbiB2YXIgdGhhdD10aGlzOy8v5oqKdGhpc+WvueixoeWkjeWItuWIsOS4tOaXtuWPmOmHj3RoYXRcclxuICAgIGNvbWJzLmZvckVhY2goKGNvbWI6YW55KT0+IHtcclxuICAgICAgbGV0IHRhZ3MgPSBjb21iLnRhZ3M7XHJcbiAgICAgIGlmICh0YWdzLmxlbmd0aCA9PT0gMCB8fCB0YWdzLmxlbmd0aCA+IDMpIHJldHVybjtcclxuICAgICAgbGV0IGNoYXJzID0gWy4uLnRoYXQuZGF0YS50YWdzX2F2YWxbdGFnc1swXV1dO1xyXG4gICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRhZ3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBsZXQgcmVkdWNlZF9jaGFycyA6IFtdPVtdO1xyXG4gICAgICAgIGNoYXJzLmZvckVhY2goKGNoYXI6IGFueSkgPT4ge1xyXG4gICAgICAgICAgLy8gY29uc29sZS5sb2codGFnc19hdmFsW3RhZ3NbaV1dKTsgXHJcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZyhjaGFyKTsgXHJcbiAgICAgICAgICB0aGF0LmRhdGEudGFnc19hdmFsW3RhZ3NbaV1dLmZvckVhY2goIHRnY2g6YW55ID0+IHtcclxuICAgICAgICAgICAgaWYgKGNoYXIubmFtZSA9PT0gdGdjaC5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgcmVkdWNlZF9jaGFycy5wdXNoKGNoYXIpO1xyXG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY2hhcnMgPSByZWR1Y2VkX2NoYXJzO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoY2hhcnMubGVuZ3RoID09PSAwKSByZXR1cm47XHJcbiAgICAgIGlmICghdGFncy5pbmNsdWRlcyhcIumrmOe6p+i1hOa3seW5suWRmFwiKSkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHRhZ3Muam9pbihcIixcIikgKyBcIiDkuI3lkKso6auY57qnKei1hOa3seW5suWRmFwiKTsgXHJcbiAgICAgICAgbGV0IHJlZHVjZTYgOmFueVtdPVtdO1xyXG4gICAgICAgIGNoYXJzLmZvckVhY2goIGZ1bmN0aW9uIChfLCBjaGFyOmFueSkge1xyXG4gICAgICAgICAgaWYgKGNoYXIubGV2ZWwgIT09IDYpIHtcclxuICAgICAgICAgICAgcmVkdWNlNi5wdXNoKGNoYXIpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNoYXJzID0gcmVkdWNlNjtcclxuICAgICAgfVxyXG4gICAgICBsZXQgZmlsdGVyZWRfY2hhcnMgOiBbXTtcclxuICAgICAgY2hhcnMuZm9yRWFjaCggZnVuY3Rpb24gKF8sIGNoYXI6YW55KSB7XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyhjaGFyLmxldmVsKTsgXHJcbiAgICAgICAgaWYgKG9wdFN0YXJzLmluY2x1ZGVzKGNoYXIubGV2ZWwudG9TdHJpbmcoKSkpIHtcclxuICAgICAgICAgIGZpbHRlcmVkX2NoYXJzLnB1c2goY2hhcik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgY2hhcnMgPSBmaWx0ZXJlZF9jaGFycztcclxuXHJcbiAgICAgIGNvbWIucG9zc2libGUgPSBjaGFycztcclxuICAgICAgaWYgKGNoYXJzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xyXG4gICAgICBsZXQgcyA9IDA7XHJcbiAgICAgIGNoYXJzLmZvckVhY2goZnVuY3Rpb24oXywgY2hhcjphbnkpICB7XHJcbiAgICAgICAgcyArPSBjaGFyLmxldmVsO1xyXG4gICAgICB9KTtcclxuICAgICAgcyA9IHMgLyBjaGFycy5sZW5ndGg7XHJcbiAgICAgIGNvbWIuc2NvcmUgPSBzICsgMC4xIC8gdGFncy5sZW5ndGggKyAwLjkgLyBjaGFycy5sZW5ndGg7XHJcbiAgICB9KTtcclxuICAgIGNvbWJzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgcmV0dXJuIGEuc2NvcmUgPiBiLnNjb3JlID8gLTEgOiAoYS5zY29yZSA8IGIuc2NvcmUgPyAxIDpcclxuICAgICAgICAoYS50YWdzLmxlbmd0aCA+IGIudGFncy5sZW5ndGggPyAxIDogKGEudGFncy5sZW5ndGggPCBiLnRhZ3MubGVuZ3RoID8gLTEgOlxyXG4gICAgICAgICAgMCkpKTtcclxuICAgIH0pO1xyXG4gICAgLy9sZXQgbm8gPSAxO1xyXG4gICAgY29tYnMuZm9yRWFjaCggZnVuY3Rpb24gKF8sIGNvbWI6YW55KSB7XHJcbiAgICAgIGlmICghY29tYi5wb3NzaWJsZXx8Y29tYi5wb3NzaWJsZS5sZW5ndGggPT09IDApIHJldHVybjtcclxuICAgICAgLy8gbGV0IGNoYXJzID0gY29tYi5wb3NzaWJsZTtcclxuICAgICAgLy8gbGV0IHRhZ3MgPSBjb21iLnRhZ3M7XHJcbiAgICAgIC8vIGxldCB0YWdzVEwgPSBjb21iLnRhZ3NUTDtcclxuICAgICAgLy8gbGV0IGNoYXJzX2h0bWwgOiBhbnlbXTtcclxuICAgICAgLy8gbGV0IGNvbG9ycyA9IHtcclxuICAgICAgLy8gICAxOiBcImRhcmtcIixcclxuICAgICAgLy8gICAyOiBcImxpZ2h0XCIsXHJcbiAgICAgIC8vICAgMzogXCJzdWNjZXNzXCIsXHJcbiAgICAgIC8vICAgNDogXCJpbmZvXCIsXHJcbiAgICAgIC8vICAgNTogXCJ3YXJuaW5nXCIsXHJcbiAgICAgIC8vICAgNjogXCJkYW5nZXJcIlxyXG4gICAgICAvLyB9O1xyXG4gICAgICBjb21iLnBvc3NpYmxlLnNvcnQoZnVuY3Rpb24gKGE6IGFueSwgYjogYW55KSB7XHJcbiAgICAgICAgcmV0dXJuIGEubGV2ZWwgPiBiLmxldmVsID8gLTEgOiAoYS5sZXZlbCA8IGIubGV2ZWwgPyAxIDogMCk7XHJcbiAgICAgIH0pO1xyXG4gICAgICAvLyBjaGFycy5mb3JFYWNoKGZ1bmN0aW9uIChfOiBhbnksIGNoYXI6YW55KSB7XHJcbiAgICAgIC8vICAgbGV0IHBhZGRpbmcgPSBzaG93TmFtZSAmJiBpbWFnZVNpemUgPCA2MCA/IFwicGFkZGluZy1yaWdodDogNHB4XCIgOlxyXG4gICAgICAvLyAgICAgXCJwYWRkaW5nLXJpZ2h0OiAxcHhcIjtcclxuICAgICAgLy8gICBsZXQgc3R5bGUgPSBzaG93SW1hZ2UgPyBcInN0eWxlPVxcXCJib3JkZXItcmFkaXVzOiA1cHg7cGFkZGluZzogMXB4IDFweDtcIiArXHJcbiAgICAgIC8vICAgICBwYWRkaW5nICsgXCI7XFxcIiBcIiA6IFwiXCI7XHJcbiAgICAgIC8vICAgbGV0IGJ1dHRvbnN0eWxlID0gaW1hZ2VTaXplID4gMjUgP1xyXG4gICAgICAvLyAgICAgXCJiYWNrZ3JvdW5kLWNvbG9yOiAjQUFBO2JvcmRlci1yYWRpdXM6IDRweDtcIiA6XHJcbiAgICAgIC8vICAgICBcImJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O2JvcmRlci1yYWRpdXM6IDRweDtcIjtcclxuICAgICAgLy8gICBjaGFyc19odG1sLnB1c2goXCI8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tc20gYnRuLVwiICtcclxuICAgICAgLy8gICAgIGNvbG9yc1tjaGFyLmxldmVsXSArIFwiIGJ0bi1jaGFyIG15LTEgZC1ub25lIGQtc20taW5saW5lXFxcIiBcIiArXHJcbiAgICAgIC8vICAgICBzdHlsZSArIFwidGl0bGU9XFxcIlwiICsgY2hhci5uYW1lICsgXCJcXFwiPlwiKTtcclxuICAgICAgLy8gICBpZiAoc2hvd0ltYWdlKSBjaGFyc19odG1sLnB1c2goXCI8aW1nIHN0eWxlPVxcXCJcIiArIGJ1dHRvbnN0eWxlICtcclxuICAgICAgLy8gICAgIFwiXFxcImhlaWdodD1cXFwiXCIgKyBpbWFnZVNpemUgKyBcIlxcXCIgd2lkdGg9XFxcIlwiICsgaW1hZ2VTaXplICtcclxuICAgICAgLy8gICAgIFwiXFxcIiBzcmM9XFxcImltZy9jaGFyYS9cIiArIGNoYXIuaW1nICsgXCIucG5nXFxcIj4gICBcIik7XHJcbiAgICAgIC8vICAgaWYgKGltYWdlU2l6ZSA+IDYwKSBjaGFyc19odG1sLnB1c2goXCI8ZGl2PlwiKTtcclxuICAgICAgLy8gICBpZiAoc2hvd05hbWUpIGNoYXJzX2h0bWwucHVzaChjaGFyLm5hbWUpO1xyXG4gICAgICAvLyAgIGlmIChpbWFnZVNpemUgPiA2MCkgY2hhcnNfaHRtbC5wdXNoKFwiPC9kaXY+XCIpO1xyXG4gICAgICAvLyAgIGNoYXJzX2h0bWwucHVzaChcIjwvYnV0dG9uPlxcblwiKTtcclxuICAgICAgLy8gICBjaGFyc19odG1sLnB1c2goXCI8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tc20gYnRuLVwiICtcclxuICAgICAgLy8gICAgIGNvbG9yc1tjaGFyLmxldmVsXSArIFwiIGJ0bi1jaGFyIG15LTEgZC1pbmxpbmUgZC1zbS1ub25lXFxcIiBcIiArXHJcbiAgICAgIC8vICAgICBcInRpdGxlPVxcXCJcIiArIGNoYXIubmFtZSArIFwiXFxcIj5cIiArIGNoYXIubmFtZSArIFwiPC9idXR0b24+XFxuXCIpO1xyXG4gICAgICAvLyB9KTtcclxuICAgICAgLy9sZXQgdGFnc19odG1sID0gW107XHJcbiAgICAgIC8vIGZvciAobGV0IGkgPSAwOyBpIDwgdGFncy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIFxyXG4gICAgICAvLyAgICAgdGFnc19odG1sLnB1c2goXHJcbiAgICAgIC8vICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tc20gYnRuLXNlY29uZGFyeSBidG4tY2hhciBteS0xXCI+JyArXHJcbiAgICAgIC8vICAgICAgIHRhZ3NbaV0gKyBcIjwvYnV0dG9uPlxcblwiKTtcclxuICAgICAgICBcclxuICAgICAgLy8gfVxyXG4gICAgICAvLyAkKFwiI3Rib2R5LXJlY29tbWVuZFwiKS5hcHBlbmQoXHJcbiAgICAgIC8vICAgXCI8dHIgY2xhc3M9XFxcInRyLXJlY29tbWRcXFwiPlwiICtcclxuICAgICAgLy8gICBcIjx0ZCBjbGFzcz1cXFwicHktMiBkLW5vbmUgZC1zbS10YWJsZS1jZWxsXFxcIj5cIiArIG5vKysgKyBcIjwvdGQ+XCIgK1xyXG4gICAgICAvLyAgIFwiPHRkIGNsYXNzPVxcXCJweS0xXFxcIj5cIiArIHRhZ3NfaHRtbC5qb2luKFwiXCIpICsgXCI8L3RkPjx0ZCBjbGFzcz1cXFwicHktMVxcXCI+XCIgK1xyXG4gICAgICAvLyAgIGNoYXJzX2h0bWwuam9pbihcIlwiKSArXHJcbiAgICAgIC8vICAgXCI8L3RkPlwiICtcclxuICAgICAgLy8gICBcIjx0ZCBjbGFzcz1cXFwicHktMiBkLW5vbmUgZC1zbS10YWJsZS1jZWxsXFxcIj5cIiArIE1hdGguZmxvb3IoY29tYi5zY29yZSAqXHJcbiAgICAgIC8vICAgICAxMDApIC8gMTAwICsgXCI8L3RkPlwiICtcclxuICAgICAgLy8gICBcIjwvdHI+XCIpO1xyXG5cclxuICAgIH0pO1xyXG4gICAgLy8gaWYgKGxhbmcgIT09ICdjbicpICQoJ1tkYXRhLXRvZ2dsZT1cInRvb2x0aXBcIl0nKS50b29sdGlwKCk7XHJcbiAgICAvL2h0dHBzOi8vYWsuZ3JhdWVuZWtvLnh5ei9ha2hyLmpzb25cclxuICAgIGxldCBfdGhhdCA9IHRoaXM7XHJcbiAgICBhcHAuZnVuYy5nZXQoJy9ha2hyLmpzb24nLCB7fSwgZnVuY3Rpb24gKGRhdGE6YW55KSB7XHJcblxyXG4gICAgICBsZXQgdGFnX2NvdW50ID0gMDtcclxuICAgICAgbGV0IGNoYXJfdGFnX3N1bSA9IDA7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKGRhdGEpOyBcclxuICAgICAgZGF0YS5mb3JFYWNoKCBmdW5jdGlvbiAoIGNoYXI6YW55KSB7XHJcbiAgICAgICAgaWYgKGNoYXIuaGlkZGVuKSByZXR1cm47XHJcbiAgICAgICAgY2hhci50YWdzLnB1c2goY2hhci50eXBlICsgXCLlubLlkZhcIik7XHJcbiAgICAgICAgY2hhci50YWdzLnB1c2goY2hhci5zZXggKyBcIuaAp+W5suWRmFwiKTtcclxuICAgICAgICBsZXQgbmFtZSA9ICBjaGFyLm5hbWUgO1xyXG4gICAgICAgIGNoYXIudGFncy5mb3JFYWNoKCBmdW5jdGlvbiAoIHRhZzphbnkpIHtcclxuICAgICAgICAgIGlmICh0YWcgaW4gX3RoYXQuZGF0YS50YWdzX2F2YWwpIHtcclxuICAgICAgICAgICAgX3RoYXQuZGF0YS50YWdzX2F2YWxbdGFnXS5wdXNoKHtcclxuICAgICAgICAgICAgICBcIm5hbWVcIjogbmFtZSxcclxuICAgICAgICAgICAgICBcImltZ1wiOiBjaGFyW1wibmFtZS1lblwiXSxcclxuICAgICAgICAgICAgICBcImxldmVsXCI6IGNoYXIubGV2ZWwsXHJcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IGNoYXIudHlwZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIF90aGF0LmRhdGEudGFnc19hdmFsW3RhZ10gPSBbe1xyXG4gICAgICAgICAgICAgIFwibmFtZVwiOiBuYW1lLFxyXG4gICAgICAgICAgICAgIFwiaW1nXCI6IGNoYXJbXCJuYW1lLWVuXCJdLFxyXG4gICAgICAgICAgICAgIFwibGV2ZWxcIjogY2hhci5sZXZlbCxcclxuICAgICAgICAgICAgICBcInR5cGVcIjogY2hhci50eXBlXHJcbiAgICAgICAgICAgIH1dO1xyXG4gICAgICAgICAgICB0YWdfY291bnQrKztcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGNoYXJfdGFnX3N1bSsrO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIF90aGF0LmRhdGEuYWxsX2NoYXJzW25hbWVdID0ge1xyXG4gICAgICAgICAgJ2xldmVsJzogY2hhci5sZXZlbCxcclxuICAgICAgICAgICd0YWdzJzogY2hhci50YWdzXHJcbiAgICAgICAgfTtcclxuICAgICAgfSk7XHJcbiAgICAgIF90aGF0LmRhdGEuYXZnX2NoYXJfdGFnID0gY2hhcl90YWdfc3VtIC8gdGFnX2NvdW50O1xyXG5cclxuXHJcblxyXG4gICAgICBjb25zb2xlLmxvZyhkYXRhKVxyXG4gICAgICBfdGhhdC5kYXRhLmNoZWNrZWRUYWdzLnB1c2goXCLmsrvnlpdcIik7XHJcbiAgICAgIF90aGF0LmNhbGMoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIFxyXG4gIH0gIFxyXG5cclxuICB9XHJcblxyXG5cclxufSkiXX0=