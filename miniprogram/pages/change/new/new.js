"use strict";
var app = getApp();
Page({
    data: {
        id: "",
        server: null,
        serverIndex: null,
        serverList: ['官服', 'B服', '其他'],
        clueList: {
            "need": [{ name: "1", showFlag: false }, { name: "2", showFlag: false }, { name: "3", showFlag: false }, { name: "4", showFlag: false }, { name: "5", showFlag: false }, { name: "6", showFlag: false }, { name: "7", showFlag: false }],
            "have": [{ name: "1", showFlag: false }, { name: "2", showFlag: false }, { name: "3", showFlag: false }, { name: "4", showFlag: false }, { name: "5", showFlag: false }, { name: "6", showFlag: false }, { name: "7", showFlag: false }]
        },
        remark: ""
    },
    PickerChange(e) {
        console.log(e);
        let tmp = this.data.serverList[e.detail.value];
        this.setData({
            serverIndex: e.detail.value,
            server: tmp
        });
    },
    InputChange: function (e) {
        console.log(e);
        let type = e.target.dataset.type;
      this.data[type] = e.detail.value;
    },
    clickClue(e) {
        console.log(e);
        let type = e.target.dataset.type;
        let clue = e.target.dataset.title;
        let clueTmp = this.data.clueList[type][clue];
        clueTmp.showFlag = !clueTmp.showFlag;
        let clueString = "clueList['" + type + "'][" + clue + "]";
        this.setData({
            clueList: this.data.clueList
        });
    },
    saveChange() {
        let req = { id: this.data.id, server: this.data.server, remark: this.data.remark, clueList: this.data.clueList };
        app.func.post('/postChange', req, function (response) {
            console.log(response);
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV3LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibmV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxJQUFJLEdBQUcsR0FBRyxNQUFNLEVBQUUsQ0FBQTtBQUVsQixJQUFJLENBQUM7SUFDSCxJQUFJLEVBQUU7UUFDSixFQUFFLEVBQUMsRUFBRTtRQUNMLE1BQU0sRUFBRSxJQUFJO1FBQ1osV0FBVyxFQUFFLElBQUk7UUFDakIsVUFBVSxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUM7UUFDOUIsUUFBUSxFQUFFO1lBQ1IsTUFBTSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FBQztZQUN4TyxNQUFNLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDO1NBQ3pPO1FBQ0wsTUFBTSxFQUFDLEVBQUU7S0FDTjtJQUtDLFlBQVksQ0FBQyxDQUFNO1FBRWpCLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxPQUFRLENBQUM7WUFDWixXQUFXLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLO1lBQzNCLE1BQU0sRUFBRSxHQUFHO1NBQ1osQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVILFdBQVcsRUFBRSxVQUFVLENBQU07UUFDM0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuQyxJQUFJLElBQUksR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFDakMsSUFBSSxDQUFDLE9BQVEsQ0FBQztZQUNaLElBQUksRUFBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUs7U0FDcEIsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUlDLFNBQVMsQ0FBQyxDQUFNO1FBQ2QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNmLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztRQUNqQyxJQUFJLElBQUksR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7UUFFbEMsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0MsT0FBTyxDQUFDLFFBQVEsR0FBRyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUM7UUFDckMsSUFBSSxVQUFVLEdBQUcsWUFBWSxHQUFHLElBQUksR0FBRyxLQUFLLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQztRQUMxRCxJQUFJLENBQUMsT0FBUSxDQUFDO1lBQ1osUUFBUSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUTtTQUM3QixDQUFDLENBQUM7SUFDTCxDQUFDO0lBQ0QsVUFBVTtRQUdSLElBQUksR0FBRyxHQUFHLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFDLENBQUE7UUFDOUcsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLEdBQUcsRUFBRSxVQUFVLFFBQWE7WUFDdkQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN4QixDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUM7Q0FFSixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBwYWdlcy9jaGFuZ2UvbmV3L25ldy5qc1xyXG52YXIgYXBwID0gZ2V0QXBwKClcclxuXHJcblBhZ2Uoe1xyXG4gIGRhdGE6IHtcclxuICAgIGlkOlwiXCIsXHJcbiAgICBzZXJ2ZXI6IG51bGwsXHJcbiAgICBzZXJ2ZXJJbmRleDogbnVsbCxcclxuICAgIHNlcnZlckxpc3Q6IFsn5a6Y5pyNJywgJ0LmnI0nLCAn5YW25LuWJ10sXHJcbiAgICBjbHVlTGlzdDoge1xyXG4gICAgICBcIm5lZWRcIjogW3sgbmFtZTogXCIxXCIsIHNob3dGbGFnOiBmYWxzZSB9LCB7IG5hbWU6IFwiMlwiLCBzaG93RmxhZzogZmFsc2UgfSwgeyBuYW1lOiBcIjNcIiwgc2hvd0ZsYWc6IGZhbHNlIH0sIHsgbmFtZTogXCI0XCIsIHNob3dGbGFnOiBmYWxzZSB9LCB7IG5hbWU6IFwiNVwiLCBzaG93RmxhZzogZmFsc2UgfSwgeyBuYW1lOiBcIjZcIiwgc2hvd0ZsYWc6IGZhbHNlIH0sIHsgbmFtZTogXCI3XCIsIHNob3dGbGFnOiBmYWxzZSB9XSxcclxuICAgICAgXCJoYXZlXCI6IFt7IG5hbWU6IFwiMVwiLCBzaG93RmxhZzogZmFsc2UgfSwgeyBuYW1lOiBcIjJcIiwgc2hvd0ZsYWc6IGZhbHNlIH0sIHsgbmFtZTogXCIzXCIsIHNob3dGbGFnOiBmYWxzZSB9LCB7IG5hbWU6IFwiNFwiLCBzaG93RmxhZzogZmFsc2UgfSwgeyBuYW1lOiBcIjVcIiwgc2hvd0ZsYWc6IGZhbHNlIH0sIHsgbmFtZTogXCI2XCIsIHNob3dGbGFnOiBmYWxzZSB9LCB7IG5hbWU6IFwiN1wiLCBzaG93RmxhZzogZmFsc2UgfV1cclxuICAgIH0sXHJcbnJlbWFyazpcIlwiXHJcbiAgfSxcclxuXHJcblxyXG4gIFxyXG5cclxuICAgIFBpY2tlckNoYW5nZShlOiBhbnkpIHtcclxuXHJcbiAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICBsZXQgdG1wID0gdGhpcy5kYXRhLnNlcnZlckxpc3RbZS5kZXRhaWwudmFsdWVdO1xyXG4gICAgICB0aGlzLnNldERhdGEhKHtcclxuICAgICAgICBzZXJ2ZXJJbmRleDogZS5kZXRhaWwudmFsdWUsXHJcbiAgICAgICAgc2VydmVyOiB0bXBcclxuICAgICAgfSlcclxuICAgIH0sXHJcblxyXG4gIElucHV0Q2hhbmdlOiBmdW5jdGlvbiAoZTogYW55KXtcclxuICAgIGNvbnNvbGUubG9nKGUudGFyZ2V0LmRhdGFzZXQudHlwZSk7XHJcbiAgICBsZXQgdHlwZSA9IGUudGFyZ2V0LmRhdGFzZXQudHlwZTtcclxuICAgIHRoaXMuc2V0RGF0YSEoe1xyXG4gICAgICB0eXBlOmUuZGV0YWlsLnZhbHVlXHJcbiAgICB9KVxyXG4gIH0sXHJcblxyXG4gIFxyXG5cclxuICAgIGNsaWNrQ2x1ZShlOiBhbnkpIHtcclxuICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgIGxldCB0eXBlID0gZS50YXJnZXQuZGF0YXNldC50eXBlO1xyXG4gICAgICBsZXQgY2x1ZSA9IGUudGFyZ2V0LmRhdGFzZXQudGl0bGU7XHJcblxyXG4gICAgICBsZXQgY2x1ZVRtcCA9IHRoaXMuZGF0YS5jbHVlTGlzdFt0eXBlXVtjbHVlXTtcclxuICAgICAgY2x1ZVRtcC5zaG93RmxhZyA9ICFjbHVlVG1wLnNob3dGbGFnO1xyXG4gICAgICBsZXQgY2x1ZVN0cmluZyA9IFwiY2x1ZUxpc3RbJ1wiICsgdHlwZSArIFwiJ11bXCIgKyBjbHVlICsgXCJdXCI7XHJcbiAgICAgIHRoaXMuc2V0RGF0YSEoe1xyXG4gICAgICAgIGNsdWVMaXN0OiB0aGlzLmRhdGEuY2x1ZUxpc3RcclxuICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgc2F2ZUNoYW5nZSgpe1xyXG4gICAgICAvL+WIpOaWreepulxyXG5cclxuICAgICAgbGV0IHJlcSA9IHsgaWQ6IHRoaXMuZGF0YS5pZCxzZXJ2ZXI6IHRoaXMuZGF0YS5zZXJ2ZXIsIHJlbWFyazogdGhpcy5kYXRhLnJlbWFyaywgY2x1ZUxpc3Q6IHRoaXMuZGF0YS5jbHVlTGlzdH1cclxuICAgICAgYXBwLmZ1bmMucG9zdCgnL3Bvc3RDaGFuZ2UnLCByZXEsIGZ1bmN0aW9uIChyZXNwb25zZTogYW55KSB7XHJcbiAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIFxyXG59KSJdfQ==