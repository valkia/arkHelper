"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var app = getApp();
Component({
    options: {
        addGlobalClass: true,
    },
    data: {
        changeList: [],
        CustomBar: app.globalData.CustomBar,
        keyword: '',
        pageIndex: 1,
        pageSize: 10
    },
    methods: {
        search: function () {
            this.setData({ pageIndex: 1 });
            this.getList();
        },
        getList: function () {
            let that = this;
            app.func.post('/changeList', { pageIndex: this.data.pageIndex, pageSize: this.data.pageSize, keyword: this.data.keyword }, function (response) {
                if (response.status === 200) {
                    let list = response.data;
                    that.setData({ changeList: list });
                    wx.pageScrollTo({
                        scrollTop: 0,
                        duration: 150
                    });
                }
            });
        },
        keywordInput: function (e) {
            let keyword = e.detail.value;
            this.setData({ keyword: keyword });
        },
        nextPage: function () {
            let page = this.data.pageIndex + 1;
            this.setData({ pageIndex: page });
            this.getList();
        },
        lastPage: function () {
            let page = this.data.pageIndex;
            this.setData({ pageIndex: page-- });
            this.getList();
        }
    },
    lifetimes: {
        attached: function () {
            this.getList();
        },
        ready: function () {
            console.log(66);
        },
        moved: function () {
            console.log(55);
        },
        detached: function () {
        },
    },
    pageLifetimes: {
        show: function () {
            this.getList();
        },
        hide: function () {
            console.log('Component-1 pageLifetimes >> Hide');
        }
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxpc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxJQUFJLEdBQUcsR0FBRyxNQUFNLEVBQUUsQ0FBQTtBQUdsQixTQUFTLENBQUM7SUFDUixPQUFPLEVBQUU7UUFDUCxjQUFjLEVBQUUsSUFBSTtLQUNyQjtJQUNELElBQUksRUFBRTtRQUNKLFVBQVUsRUFBRyxFQUFFO1FBQ2YsU0FBUyxFQUFFLEdBQUcsQ0FBQyxVQUFVLENBQUMsU0FBUztRQUNuQyxPQUFPLEVBQUMsRUFBRTtRQUNWLFNBQVMsRUFBQyxDQUFDO1FBQ1gsUUFBUSxFQUFDLEVBQUU7S0FDWjtJQUVELE9BQU8sRUFBRTtRQUNQLE1BQU0sRUFBQztZQUNMLElBQUksQ0FBQyxPQUFRLENBQUMsRUFBRSxTQUFTLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNoQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDakIsQ0FBQztRQUNELE9BQU8sRUFBQztZQUNOLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztZQUNoQixHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRyxFQUFFLFVBQVUsUUFBaUI7Z0JBQ3JKLElBQUksUUFBUSxDQUFDLE1BQU0sS0FBSyxHQUFHLEVBQUU7b0JBRTNCLElBQUksSUFBSSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUM7b0JBVXpCLElBQUksQ0FBQyxPQUFRLENBQUMsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztvQkFDcEMsRUFBRSxDQUFDLFlBQVksQ0FBQzt3QkFDZCxTQUFTLEVBQUUsQ0FBQzt3QkFDWixRQUFRLEVBQUUsR0FBRztxQkFDZCxDQUFDLENBQUE7aUJBQ0g7WUFDSCxDQUFDLENBQUMsQ0FBQTtRQUNKLENBQUM7UUFDRCxZQUFZLEVBQUUsVUFBVSxDQUFNO1lBQzFCLElBQUksT0FBTyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1lBQy9CLElBQUksQ0FBQyxPQUFRLENBQUMsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUN0QyxDQUFDO1FBQ0QsUUFBUSxFQUFDO1lBQ1AsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUMsQ0FBQyxDQUFDO1lBQ2pDLElBQUksQ0FBQyxPQUFRLENBQUMsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUNuQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDakIsQ0FBQztRQUNELFFBQVEsRUFBRTtZQUNSLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQy9CLElBQUksQ0FBQyxPQUFRLENBQUMsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ3JDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNqQixDQUFDO0tBQ0Y7SUFDRCxTQUFTLEVBQUU7UUFFVCxRQUFRLEVBQUU7WUFDUixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDakIsQ0FBQztRQUNELEtBQUssRUFBRTtZQUNMLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbEIsQ0FBQztRQUNELEtBQUssRUFBRTtZQUNMLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDakIsQ0FBQztRQUNGLFFBQVEsRUFBRTtRQUVULENBQUM7S0FFSDtJQUNELGFBQWEsRUFBRTtRQUViLElBQUksRUFBRTtZQUNKLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNqQixDQUFDO1FBQ0QsSUFBSSxFQUFFO1lBQ0osT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO1FBQ25ELENBQUM7S0FDRjtDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIHBhZ2VzL2NoYW5nZS9saXN0L2xpc3QuanNcclxudmFyIGFwcCA9IGdldEFwcCgpXHJcbi8vQHRzLWlnbm9yZVxyXG5pbXBvcnQgQXJrUmVzcCA9IHJlcXVpcmUoJy4uLy4uL21vZGVsL0Fya1Jlc3AuanMnKTtcclxuQ29tcG9uZW50KHtcclxuICBvcHRpb25zOiB7XHJcbiAgICBhZGRHbG9iYWxDbGFzczogdHJ1ZSxcclxuICB9LFxyXG4gIGRhdGE6IHtcclxuICAgIGNoYW5nZUxpc3QgOiBbXSxcclxuICAgIEN1c3RvbUJhcjogYXBwLmdsb2JhbERhdGEuQ3VzdG9tQmFyLFxyXG4gICAga2V5d29yZDonJyxcclxuICAgIHBhZ2VJbmRleDoxLFxyXG4gICAgcGFnZVNpemU6MTBcclxuICB9LFxyXG5cclxuICBtZXRob2RzOiB7XHJcbiAgICBzZWFyY2g6ZnVuY3Rpb24oKXtcclxuICAgICAgdGhpcy5zZXREYXRhISh7IHBhZ2VJbmRleDogMSB9KTtcclxuICAgICAgdGhpcy5nZXRMaXN0KCk7XHJcbiAgICB9LFxyXG4gICAgZ2V0TGlzdDpmdW5jdGlvbigpe1xyXG4gICAgICBsZXQgdGhhdCA9IHRoaXM7XHJcbiAgICAgIGFwcC5mdW5jLnBvc3QoJy9jaGFuZ2VMaXN0JywgeyBwYWdlSW5kZXg6IHRoaXMuZGF0YS5wYWdlSW5kZXgsIHBhZ2VTaXplOiB0aGlzLmRhdGEucGFnZVNpemUsIGtleXdvcmQ6IHRoaXMuZGF0YS5rZXl3b3JkICB9LCBmdW5jdGlvbiAocmVzcG9uc2U6IEFya1Jlc3ApIHtcclxuICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHtcclxuXHJcbiAgICAgICAgICBsZXQgbGlzdCA9IHJlc3BvbnNlLmRhdGE7XHJcbiAgICAgICAgICAvLyBsaXN0LmZvckVhY2goKGl0ZW06YW55KT0+e1xyXG4gICAgICAgICAgLy8gICBpZiAoaXRlbS5jcmVhdGVkdGltZS5zbGljZSgwLCAxMCkgPT09IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5zbGljZSgwLCAxMCkpIHtcclxuICAgICAgICAgIC8vICAgICBpdGVtLmNyZWF0ZWR0aW1lID0gXCLku4rlpKlcIjtcclxuICAgICAgICAgIC8vICAgfSBlbHNlIHtcclxuICAgICAgICAgIC8vICAgICBpdGVtLmNyZWF0ZWR0aW1lID0gaXRlbS5jcmVhdGVkdGltZS5zbGljZSgwLCAxMCk7Ly8yMDE0LTA3LTAxXHJcbiAgICAgICAgICAvLyAgIH1cclxuICAgICAgICAgIC8vIH0pXHJcbiAgICAgICAgICBcclxuXHJcbiAgICAgICAgICB0aGF0LnNldERhdGEhKHsgY2hhbmdlTGlzdDogbGlzdCB9KTtcclxuICAgICAgICAgIHd4LnBhZ2VTY3JvbGxUbyh7XHJcbiAgICAgICAgICAgIHNjcm9sbFRvcDogMCxcclxuICAgICAgICAgICAgZHVyYXRpb246IDE1MFxyXG4gICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9LFxyXG4gICAga2V5d29yZElucHV0OiBmdW5jdGlvbiAoZTogYW55KXtcclxuICAgICAgICBsZXQga2V5d29yZCA9IGUuZGV0YWlsLnZhbHVlO1xyXG4gICAgICB0aGlzLnNldERhdGEhKHsga2V5d29yZDoga2V5d29yZCB9KTtcclxuICAgIH0sXHJcbiAgICBuZXh0UGFnZTpmdW5jdGlvbigpe1xyXG4gICAgICBsZXQgcGFnZSA9IHRoaXMuZGF0YS5wYWdlSW5kZXgrMTtcclxuICAgICAgdGhpcy5zZXREYXRhISh7IHBhZ2VJbmRleDogcGFnZSB9KTtcclxuICAgICAgdGhpcy5nZXRMaXN0KCk7XHJcbiAgICB9LFxyXG4gICAgbGFzdFBhZ2U6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgbGV0IHBhZ2UgPSB0aGlzLmRhdGEucGFnZUluZGV4O1xyXG4gICAgICB0aGlzLnNldERhdGEhKHsgcGFnZUluZGV4OiBwYWdlLS0gfSk7XHJcbiAgICAgIHRoaXMuZ2V0TGlzdCgpO1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgbGlmZXRpbWVzOiB7XHJcbiAgICAvLyDnlJ/lkb3lkajmnJ/lh73mlbDvvIzlj6/ku6XkuLrlh73mlbDvvIzmiJbkuIDkuKrlnKhtZXRob2Rz5q615Lit5a6a5LmJ55qE5pa55rOV5ZCNXHJcbiAgICBhdHRhY2hlZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICB0aGlzLmdldExpc3QoKTtcclxuICAgIH0sXHJcbiAgICByZWFkeTogZnVuY3Rpb24gKCkge1xyXG4gICAgICBjb25zb2xlLmxvZyg2Nik7XHJcbiAgICB9LFxyXG4gICAgbW92ZWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgY29uc29sZS5sb2coNTUpO1xyXG4gICAgIH0sXHJcbiAgICBkZXRhY2hlZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICBcclxuICAgICB9LFxyXG4gICAgXHJcbiAgfSxcclxuICBwYWdlTGlmZXRpbWVzOiB7XHJcbiAgICAvLyDnu4Tku7bmiYDlnKjpobXpnaLnmoTnlJ/lkb3lkajmnJ/lo7DmmI7lr7nosaHvvIznm67liY3ku4XmlK/mjIHpobXpnaLnmoRzaG935ZKMaGlkZeS4pOS4queUn+WRveWRqOacn1xyXG4gICAgc2hvdzogZnVuY3Rpb24gKCkge1xyXG4gICAgICB0aGlzLmdldExpc3QoKTtcclxuICAgIH0sXHJcbiAgICBoaWRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdDb21wb25lbnQtMSBwYWdlTGlmZXRpbWVzID4+IEhpZGUnKTtcclxuICAgIH1cclxuICB9XHJcbn0pIl19