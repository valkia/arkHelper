"use strict";
var app = getApp();
Component({
    options: {
        addGlobalClass: true,
    },
    data: {
        changeList: [],
        CustomBar: app.globalData.CustomBar,
        keyword: '',
        pageIndex: 1,
        pageSize: 10
    },
    methods: {
        search: function () {
            let that = this;
            app.func.post('/changeList', { pageIndex: 1, pageSize: 10, keyword: this.data.keyword }, function (response) {
                that.setData({ changeList: response });
            });
        },
        keywordInput: function (e) {
            let keyword = e.detail.value;
            this.setData({ keyword: keyword });
        },
        nextPage: function () {
            let page = this.data.pageIndex + 1;
            this.setData({ pageIndex: page });
            let that = this;
            app.func.post('/changeList', { pageIndex: this.data.pageIndex, pageSize: this.data.pageSize, keyword: this.data.keyword }, function (response) {
                that.setData({ changeList: response });
                wx.pageScrollTo({
                    scrollTop: 0,
                    duration: 300
                });
            });
        },
        lastPage: function () {
            let page = this.data.pageIndex;
            this.setData({ pageIndex: page-- });
            let that = this;
            app.func.post('/changeList', { pageIndex: this.data.pageIndex, pageSize: this.data.pageSize, keyword: this.data.keyword }, function (response) {
                that.setData({ changeList: response });
            });
        }
    },
    lifetimes: {
        attached: function () {
            let that = this;
            app.func.post('/changeList', { pageIndex: 1, pageSize: 10 }, function (response) {
                that.setData({ changeList: response });
            });
        },
        ready: function () {
            console.log(66);
        },
        moved: function () {
            console.log(55);
        },
        detached: function () {
            let that = this;
            app.func.post('/changeList', { pageIndex: 1, pageSize: 10 }, function (response) {
                that.setData({ changeList: response });
            });
        },
    },
    pageLifetimes: {
        show: function () {
            let that = this;
            app.func.post('/changeList', { pageIndex: 1, pageSize: 10 }, function (response) {
                that.setData({ changeList: response });
            });
        },
        hide: function () {
            console.log('Component-1 pageLifetimes >> Hide');
        }
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxpc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLElBQUksR0FBRyxHQUFHLE1BQU0sRUFBRSxDQUFBO0FBRWxCLFNBQVMsQ0FBQztJQUNSLE9BQU8sRUFBRTtRQUNQLGNBQWMsRUFBRSxJQUFJO0tBQ3JCO0lBQ0QsSUFBSSxFQUFFO1FBQ0osVUFBVSxFQUFHLEVBQUU7UUFDZixTQUFTLEVBQUUsR0FBRyxDQUFDLFVBQVUsQ0FBQyxTQUFTO1FBQ25DLE9BQU8sRUFBQyxFQUFFO1FBQ1YsU0FBUyxFQUFDLENBQUM7UUFDWCxRQUFRLEVBQUMsRUFBRTtLQUNaO0lBRUQsT0FBTyxFQUFFO1FBQ1AsTUFBTSxFQUFDO1lBQ0wsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO1lBQ2hCLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxFQUFFLFNBQVMsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUMsRUFBRSxVQUFVLFFBQWE7Z0JBQzdHLElBQUksQ0FBQyxPQUFRLENBQUMsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztZQUMxQyxDQUFDLENBQUMsQ0FBQTtRQUNKLENBQUM7UUFDRCxZQUFZLEVBQUUsVUFBVSxDQUFNO1lBQzFCLElBQUksT0FBTyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1lBQy9CLElBQUksQ0FBQyxPQUFRLENBQUMsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUN0QyxDQUFDO1FBQ0QsUUFBUSxFQUFDO1lBQ1AsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUMsQ0FBQyxDQUFDO1lBQ2pDLElBQUksQ0FBQyxPQUFRLENBQUMsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENB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QUFDO1FBQ25ELENBQUM7S0FDRjtDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIHBhZ2VzL2NoYW5nZS9saXN0L2xpc3QuanNcclxudmFyIGFwcCA9IGdldEFwcCgpXHJcblxyXG5Db21wb25lbnQoe1xyXG4gIG9wdGlvbnM6IHtcclxuICAgIGFkZEdsb2JhbENsYXNzOiB0cnVlLFxyXG4gIH0sXHJcbiAgZGF0YToge1xyXG4gICAgY2hhbmdlTGlzdCA6IFtdLFxyXG4gICAgQ3VzdG9tQmFyOiBhcHAuZ2xvYmFsRGF0YS5DdXN0b21CYXIsXHJcbiAgICBrZXl3b3JkOicnLFxyXG4gICAgcGFnZUluZGV4OjEsXHJcbiAgICBwYWdlU2l6ZToxMFxyXG4gIH0sXHJcblxyXG4gIG1ldGhvZHM6IHtcclxuICAgIHNlYXJjaDpmdW5jdGlvbigpe1xyXG4gICAgICBsZXQgdGhhdCA9IHRoaXM7XHJcbiAgICAgIGFwcC5mdW5jLnBvc3QoJy9jaGFuZ2VMaXN0JywgeyBwYWdlSW5kZXg6IDEsIHBhZ2VTaXplOiAxMCwga2V5d29yZDogdGhpcy5kYXRhLmtleXdvcmR9LCBmdW5jdGlvbiAocmVzcG9uc2U6IGFueSkge1xyXG4gICAgICAgIHRoYXQuc2V0RGF0YSEoeyBjaGFuZ2VMaXN0OiByZXNwb25zZSB9KTtcclxuICAgICAgfSlcclxuICAgIH0sXHJcbiAgICBrZXl3b3JkSW5wdXQ6IGZ1bmN0aW9uIChlOiBhbnkpe1xyXG4gICAgICAgIGxldCBrZXl3b3JkID0gZS5kZXRhaWwudmFsdWU7XHJcbiAgICAgIHRoaXMuc2V0RGF0YSEoeyBrZXl3b3JkOiBrZXl3b3JkIH0pO1xyXG4gICAgfSxcclxuICAgIG5leHRQYWdlOmZ1bmN0aW9uKCl7XHJcbiAgICAgIGxldCBwYWdlID0gdGhpcy5kYXRhLnBhZ2VJbmRleCsxO1xyXG4gICAgICB0aGlzLnNldERhdGEhKHsgcGFnZUluZGV4OiBwYWdlIH0pO1xyXG4gICAgICBsZXQgdGhhdCA9IHRoaXM7XHJcbiAgICAgIGFwcC5mdW5jLnBvc3QoJy9jaGFuZ2VMaXN0JywgeyBwYWdlSW5kZXg6IHRoaXMuZGF0YS5wYWdlSW5kZXgsIHBhZ2VTaXplOiB0aGlzLmRhdGEucGFnZVNpemUsIGtleXdvcmQ6IHRoaXMuZGF0YS5rZXl3b3JkIH0sIGZ1bmN0aW9uIChyZXNwb25zZTogYW55KSB7XHJcbiAgICAgICAgdGhhdC5zZXREYXRhISh7IGNoYW5nZUxpc3Q6IHJlc3BvbnNlIH0pO1xyXG4gICAgICAgIHd4LnBhZ2VTY3JvbGxUbyh7XHJcbiAgICAgICAgICBzY3JvbGxUb3A6IDAsXHJcbiAgICAgICAgICBkdXJhdGlvbjogMzAwXHJcbiAgICAgICAgfSlcclxuICAgICAgfSlcclxuICAgIH0sXHJcbiAgICBsYXN0UGFnZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICBsZXQgcGFnZSA9IHRoaXMuZGF0YS5wYWdlSW5kZXg7XHJcbiAgICAgIHRoaXMuc2V0RGF0YSEoeyBwYWdlSW5kZXg6IHBhZ2UtLSB9KTtcclxuICAgICAgbGV0IHRoYXQgPSB0aGlzO1xyXG4gICAgICBhcHAuZnVuYy5wb3N0KCcvY2hhbmdlTGlzdCcsIHsgcGFnZUluZGV4OiB0aGlzLmRhdGEucGFnZUluZGV4LCBwYWdlU2l6ZTogdGhpcy5kYXRhLnBhZ2VTaXplLCBrZXl3b3JkOiB0aGlzLmRhdGEua2V5d29yZCB9LCBmdW5jdGlvbiAocmVzcG9uc2U6IGFueSkge1xyXG4gICAgICAgIHRoYXQuc2V0RGF0YSEoeyBjaGFuZ2VMaXN0OiByZXNwb25zZSB9KTtcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9LFxyXG4gIGxpZmV0aW1lczoge1xyXG4gICAgLy8g55Sf5ZG95ZGo5pyf5Ye95pWw77yM5Y+v5Lul5Li65Ye95pWw77yM5oiW5LiA5Liq5ZyobWV0aG9kc+auteS4reWumuS5ieeahOaWueazleWQjVxyXG4gICAgYXR0YWNoZWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgbGV0IHRoYXQgPSB0aGlzO1xyXG4gICAgICBhcHAuZnVuYy5wb3N0KCcvY2hhbmdlTGlzdCcsIHtwYWdlSW5kZXg6MSxwYWdlU2l6ZToxMH0sIGZ1bmN0aW9uIChyZXNwb25zZTogYW55KSB7XHJcbiAgICAgICAgdGhhdC5zZXREYXRhISh7Y2hhbmdlTGlzdCA6IHJlc3BvbnNlfSk7XHJcbiAgICAgIH0pXHJcbiAgICB9LFxyXG4gICAgcmVhZHk6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgY29uc29sZS5sb2coNjYpO1xyXG4gICAgfSxcclxuICAgIG1vdmVkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKDU1KTtcclxuICAgICB9LFxyXG4gICAgZGV0YWNoZWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgbGV0IHRoYXQgPSB0aGlzO1xyXG4gICAgICBhcHAuZnVuYy5wb3N0KCcvY2hhbmdlTGlzdCcsIHsgcGFnZUluZGV4OiAxLCBwYWdlU2l6ZTogMTAgfSwgZnVuY3Rpb24gKHJlc3BvbnNlOiBhbnkpIHtcclxuICAgICAgICB0aGF0LnNldERhdGEhKHsgY2hhbmdlTGlzdDogcmVzcG9uc2UgfSk7XHJcbiAgICAgIH0pXHJcbiAgICAgfSxcclxuICAgIFxyXG4gIH0sXHJcbiAgcGFnZUxpZmV0aW1lczoge1xyXG4gICAgLy8g57uE5Lu25omA5Zyo6aG16Z2i55qE55Sf5ZG95ZGo5pyf5aOw5piO5a+56LGh77yM55uu5YmN5LuF5pSv5oyB6aG16Z2i55qEc2hvd+WSjGhpZGXkuKTkuKrnlJ/lkb3lkajmnJ9cclxuICAgIHNob3c6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgbGV0IHRoYXQgPSB0aGlzO1xyXG4gICAgICBhcHAuZnVuYy5wb3N0KCcvY2hhbmdlTGlzdCcsIHsgcGFnZUluZGV4OiAxLCBwYWdlU2l6ZTogMTAgfSwgZnVuY3Rpb24gKHJlc3BvbnNlOiBhbnkpIHtcclxuICAgICAgICB0aGF0LnNldERhdGEhKHsgY2hhbmdlTGlzdDogcmVzcG9uc2UgfSk7XHJcbiAgICAgIH0pXHJcbiAgICB9LFxyXG4gICAgaGlkZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICBjb25zb2xlLmxvZygnQ29tcG9uZW50LTEgcGFnZUxpZmV0aW1lcyA+PiBIaWRlJyk7XHJcbiAgICB9XHJcbiAgfVxyXG59KSJdfQ==